{"version":3,"sources":["utils/api.ts","components/Sidebar.tsx","components/Header.tsx","components/RoundContainer.tsx","views/MainView.tsx","views/MainStyles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["client","applyConverters","axios","create","handleErrors","r","status","Error","statusText","data","fetchRoundInfo","roundId","get","concat","then","fetchRoundResults","Sidebar","_ref","isLoading","rounds","onRoundClicked","classes","react_default","a","createElement","index_es","className","drawer","variant","paper","drawerPaper","toolbar","progress","map","round","key","id","button","primary","displayName","year","onClick","Header","position","appBar","color","noWrap","RoundContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","roundInfo","undefined","roundResults","inherits","createClass","value","_componentWillReceiveProps","asyncToGenerator","regenerator_default","mark","_callee","nextProps","info","results","wrap","_context","prev","next","props","abrupt","setState","sent","console","log","stop","_x","paragraph","fullScoreboardSize","filter","x","country","sort","b","rank","result","i","displayname","score_1","content","renderStats","renderHelp","Component","MainView","withStyles","theme","createStyles","root","display","zIndex","width","flexShrink","flexGrow","padding","spacing","unit","mixins","margin","alignSelf","_temp","_componentDidMount","config","Promise","resolve","setTimeout","_this2","_this$state","selectedRound","Header_Header","Sidebar_Sidebar","assign","RoundContainer_RoundContainer","createMuiTheme","palette","indigo","secondary","pink","type","typography","useNextVariants","App","core_styles","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91e279f2.chunk.js","sourcesContent":["import axios, { AxiosResponse, AxiosInstance } from \"axios\";\nimport { Config } from \"../model/Config\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport applyConverters from \"axios-case-converter\";\nimport { RoundResult } from \"../model/RoundResult\";\n\nconst client = applyConverters(axios.create() as any) as AxiosInstance;\n\nconst handleErrors = <T>(r: AxiosResponse<T>) => {\n    if (r.status < 200 || r.status >= 300) throw new Error(r.status + \": \" + r.statusText);\n    return r.data;\n};\n\nexport const fetchConfig = () =>\n    client\n        .get<Config>(\"config.json\")\n        .then(handleErrors)\n\nexport const fetchRoundInfo = (roundId: string) =>\n    client\n        .get<RoundInfo>(`round_data/info/${roundId}.json`)\n        .then(handleErrors);\n\nexport const fetchRoundResults = (roundId: string) =>\n    client\n        .get<RoundResult[]>(`round_data/scores/${roundId}.json`)\n        .then(handleErrors);","import React from \"react\";\nimport { Round } from \"../model/Round\";\nimport { StyledComponentProps, Drawer, List, ListItem, ListItemText, WithStyles, CircularProgress } from \"@material-ui/core\";\nimport { styles } from \"../views/MainStyles\";\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    isLoading: boolean;\n    rounds: Round[];\n    onRoundClicked: (round: Round) => void;\n}\n\nexport const Sidebar = ({isLoading, rounds, onRoundClicked, classes}: SidebarProps) => (\n    <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n            paper: classes.drawerPaper\n        }}\n    >\n        <div className={classes.toolbar}/>\n        { isLoading\n        ? <CircularProgress className={classes.progress} />\n        :\n        <List>\n            {rounds.map(round =>\n                <ListItem key={round.id} button>\n                    <ListItemText\n                        primary={`${round.displayName} ${round.year}`}\n                        onClick={() => onRoundClicked(round)}\n                    />\n                </ListItem>\n            )}\n        </List>\n        }\n    </Drawer>\n);","import React from \"react\";\nimport { WithStyles, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { styles } from \"../views/MainStyles\";\n\ninterface HeaderProps extends WithStyles<typeof styles> {}\n\nexport const Header = ({classes}: HeaderProps) => (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                Google Code Jam Statistics\n            </Typography>\n        </Toolbar>\n    </AppBar>\n);","import React, {Component} from \"react\";\nimport { WithStyles, CircularProgress, Typography, LinearProgress, Paper, Table, TableHead, TableRow, TableCell, TableBody } from \"@material-ui/core\";\nimport { styles } from \"../views/MainStyles\";\nimport { Round } from \"../model/Round\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { fetchRoundInfo, fetchRoundResults } from \"../utils/api\";\n\ninterface RoundContainerProps extends WithStyles<typeof styles> {\n    round?: Round;\n}\n\ninterface RoundContainerState {\n    isLoading: boolean;\n    roundInfo?: RoundInfo;\n    roundResults: RoundResult[]\n}\n\nexport class RoundContainer extends Component<RoundContainerProps, RoundContainerState> {\n    state: RoundContainerState = {\n        isLoading: false,\n        roundInfo: undefined,\n        roundResults: []\n    }\n\n    async componentWillReceiveProps(nextProps: RoundContainerProps) {\n        if(this.props == nextProps) return;\n        if(!nextProps.round) {\n            this.setState({isLoading: false, roundInfo: undefined, roundResults: []});\n            return;\n        }\n        this.setState({isLoading: true});\n        const roundId = nextProps.round.id;\n        const info = await fetchRoundInfo(roundId);\n        const results = await fetchRoundResults(roundId);\n        console.log(info, results);\n        this.setState({isLoading: false, roundInfo: info, roundResults: results});\n    }\n\n    renderHelp() {\n        return (\n            <Typography paragraph>\n                Please select a round from the side menu.\n            </Typography>\n        )\n    }\n\n    renderStats(roundInfo: RoundInfo, results: RoundResult[]) {\n        return (\n            <div>\n                <Typography paragraph>\n                    {roundInfo.fullScoreboardSize} people participated in this round. Here are the results of Lithuanian participants:\n                </Typography>\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Rank</TableCell>\n                                <TableCell>Username</TableCell>\n                                <TableCell>Score</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {results\n                                .filter(x => x.country == \"Lithuania\")\n                                .sort((a, b) => a.rank-b.rank)\n                                .map((result, i) =>\n                                    <TableRow key={i}>\n                                        <TableCell>{result.rank}</TableCell>\n                                        <TableCell>{result.displayname}</TableCell>\n                                        <TableCell>{result.score_1}</TableCell>\n                                    </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <main className={this.props.classes.content}>\n                <div className={this.props.classes.toolbar} />\n                { this.state.isLoading\n                ? <CircularProgress className={this.props.classes.progress} color=\"secondary\" />\n                : !this.state.roundInfo\n                ? this.renderHelp()\n                : this.renderStats(this.state.roundInfo, this.state.roundResults)\n                }\n            </main>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { Round } from \"../model/Round\";\nimport { fetchConfig } from \"../utils/api\";\nimport { Link } from \"react-router-dom\";\nimport { List, ListItem, ListItemText, AppBar, Toolbar, Typography, Drawer, createStyles, Theme, withStyles, StyledComponentProps, CircularProgress, WithStyles } from \"@material-ui/core\";\nimport { Sidebar } from \"../components/Sidebar\";\nimport { styles } from \"./MainStyles\";\nimport { Header } from \"../components/Header\";\nimport { RoundContainer } from \"../components/RoundContainer\";\n\ninterface MainViewState {\n    rounds: Round[];\n    isLoading: boolean;\n    selectedRound?: Round;\n}\n\ninterface MainViewProps extends WithStyles<typeof styles> {}\n\nexport const MainView = withStyles(styles)(class extends Component<MainViewProps, MainViewState> {\n    state: MainViewState = {\n        rounds: [],\n        isLoading: true\n    };\n\n    async componentDidMount() {\n        const config = await fetchConfig();\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        this.setState({\n            rounds: config.rounds,\n            isLoading: false\n        });\n    }\n\n    render() {\n        const {isLoading, rounds, selectedRound} = this.state;\n        const classes = this.props.classes;\n        return (\n            <div className={classes.root}>\n                <Header {...this.props} />\n                <Sidebar\n                    {...this.props}\n                    isLoading={isLoading}\n                    rounds={rounds}\n                    onRoundClicked={round => this.setState({selectedRound: round})}\n                />\n                <RoundContainer\n                    {...this.props}\n                    round={selectedRound}\n                />\n            </div>\n        );\n    }\n});\n\n// export const MainView = withStyles(styles)(MainView);","import { Theme, createStyles } from \"@material-ui/core\";\n\nconst drawerWidth = 240;\nexport const styles = (theme: Theme) => createStyles({\n    root: {\n        display: \"flex\",\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing.unit * 3,\n    },\n    toolbar: theme.mixins.toolbar,\n    progress: {\n        margin: theme.spacing.unit*2,\n        alignSelf: \"center\"\n    }\n});","import React, { Component } from \"react\";\nimport { Round } from \"./model/Round\";\nimport { fetchConfig } from \"./utils/api\";\nimport { Switch, Route } from \"react-router\";\nimport { MainView } from \"./views/MainView\";\nimport { HashRouter } from \"react-router-dom\";\nimport { RoundView } from \"./views/RoundView\";\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport { pink, indigo } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: indigo,\n        secondary: pink,\n        type: \"light\"\n    },\n    typography: {\n        useNextVariants: true\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <React.Fragment>\n                    <CssBaseline />\n                    <MainView />\n                </React.Fragment>\n            </MuiThemeProvider>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}