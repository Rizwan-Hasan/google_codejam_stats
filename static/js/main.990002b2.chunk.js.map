{"version":3,"sources":["utils/api.ts","components/RoundContainer.tsx","views/MainStyles.ts","components/Header.tsx","components/Sidebar.tsx","views/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["client","applyConverters","axios","create","handleErrors","r","status","Error","statusText","data","fetchRoundInfo","roundId","get","concat","then","fetchRoundResults","RoundContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","isLoading","roundInfo","undefined","roundResults","inherits","createClass","key","value","_componentWillReceiveProps","asyncToGenerator","regenerator_default","a","mark","_callee","nextProps","info","results","wrap","_context","prev","next","props","abrupt","round","setState","id","sent","console","log","stop","_x","react_default","createElement","index_es","paragraph","fullScoreboardSize","className","classes","tableRoot","filter","x","country","sort","b","rank","map","result","i","displayname","score_1","content","toolbar","progress","color","renderStats","renderHelp","Component","styles","theme","createStyles","root","display","appBar","zIndex","drawer","defineProperty","breakpoints","up","width","flexShrink","drawerPaper","flexGrow","padding","spacing","unit","flexDirection","overflowX","mixins","margin","alignSelf","menuButton","marginRight","Header","withStyles","_ref","onDrawerToggle","position","aria-label","onClick","icons_index_es","variant","noWrap","Sidebar","withTheme","_temp","isDrawerOpen","handleDrawerToggle","_this$props","rounds","onRoundClicked","button","primary","displayName","year","smUp","implementation","anchor","direction","open","onClose","paper","renderDrawer","xsDown","MainView","_componentDidMount","config","Promise","resolve","setTimeout","_this2","_this$state","selectedRound","assign","RoundContainer_RoundContainer","createMuiTheme","palette","indigo","secondary","pink","type","typography","useNextVariants","App","core_styles","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.990002b2.chunk.js","sourcesContent":["import axios, { AxiosResponse, AxiosInstance } from \"axios\";\r\nimport { Config } from \"../model/Config\";\r\nimport { RoundInfo } from \"../model/RoundInfo\";\r\nimport applyConverters from \"axios-case-converter\";\r\nimport { RoundResult } from \"../model/RoundResult\";\r\n\r\nconst client = applyConverters(axios.create() as any) as AxiosInstance;\r\n\r\nconst handleErrors = <T>(r: AxiosResponse<T>) => {\r\n    if (r.status < 200 || r.status >= 300) throw new Error(r.status + \": \" + r.statusText);\r\n    return r.data;\r\n};\r\n\r\nexport const fetchConfig = () =>\r\n    client\r\n        .get<Config>(\"config.json\")\r\n        .then(handleErrors)\r\n\r\nexport const fetchRoundInfo = (roundId: string) =>\r\n    client\r\n        .get<RoundInfo>(`round_data/info/${roundId}.json`)\r\n        .then(handleErrors);\r\n\r\nexport const fetchRoundResults = (roundId: string) =>\r\n    client\r\n        .get<RoundResult[]>(`round_data/scores/${roundId}.json`)\r\n        .then(handleErrors);","import { CircularProgress, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography, WithStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { Round } from \"../model/Round\";\r\nimport { RoundInfo } from \"../model/RoundInfo\";\r\nimport { RoundResult } from \"../model/RoundResult\";\r\nimport { fetchRoundInfo, fetchRoundResults } from \"../utils/api\";\r\nimport { styles } from \"../views/MainStyles\";\r\n\r\ninterface RoundContainerProps extends WithStyles<typeof styles> {\r\n    round?: Round;\r\n}\r\n\r\ninterface RoundContainerState {\r\n    isLoading: boolean;\r\n    roundInfo?: RoundInfo;\r\n    roundResults: RoundResult[]\r\n}\r\n\r\nexport class RoundContainer extends Component<RoundContainerProps, RoundContainerState> {\r\n    state: RoundContainerState = {\r\n        isLoading: false,\r\n        roundInfo: undefined,\r\n        roundResults: []\r\n    }\r\n\r\n    async componentWillReceiveProps(nextProps: RoundContainerProps) {\r\n        if(this.props == nextProps) return;\r\n        if(!nextProps.round) {\r\n            this.setState({isLoading: false, roundInfo: undefined, roundResults: []});\r\n            return;\r\n        }\r\n        this.setState({isLoading: true});\r\n        const roundId = nextProps.round.id;\r\n        const info = await fetchRoundInfo(roundId);\r\n        const results = await fetchRoundResults(roundId);\r\n        console.log(info, results);\r\n        this.setState({isLoading: false, roundInfo: info, roundResults: results});\r\n    }\r\n\r\n    renderHelp() {\r\n        return (\r\n            <Typography paragraph>\r\n                Please select a round from the side menu.\r\n            </Typography>\r\n        )\r\n    }\r\n\r\n    renderStats(roundInfo: RoundInfo, results: RoundResult[]) {\r\n        return (\r\n            <div>\r\n                <Typography paragraph>\r\n                    {roundInfo.fullScoreboardSize} people participated in this round. Here are the results of Lithuanian participants:\r\n                </Typography>\r\n                <Paper className={this.props.classes.tableRoot}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Rank</TableCell>\r\n                                <TableCell>Username</TableCell>\r\n                                <TableCell>Score</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {results\r\n                                .filter(x => x.country == \"Lithuania\")\r\n                                .sort((a, b) => a.rank-b.rank)\r\n                                .map((result, i) =>\r\n                                    <TableRow key={i}>\r\n                                        <TableCell>{result.rank}</TableCell>\r\n                                        <TableCell>{result.displayname}</TableCell>\r\n                                        <TableCell>{result.score_1}</TableCell>\r\n                                    </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </Paper>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main className={this.props.classes.content}>\r\n                <div className={this.props.classes.toolbar} />\r\n                { this.state.isLoading\r\n                ? <CircularProgress className={this.props.classes.progress} color=\"secondary\" />\r\n                : !this.state.roundInfo\r\n                ? this.renderHelp()\r\n                : this.renderStats(this.state.roundInfo, this.state.roundResults)\r\n                }\r\n            </main>\r\n        )\r\n    }\r\n}","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\nconst drawerWidth = 240;\r\nexport const styles = (theme: Theme) => createStyles({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        }\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing.unit * 3,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        overflowX: \"auto\"\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    progress: {\r\n        margin: theme.spacing.unit*2,\r\n        alignSelf: \"center\"\r\n    },\r\n    menuButton: {\r\n        marginRight: 20,\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n        },\r\n    },\r\n    tableRoot: {\r\n        overflowX: \"auto\"\r\n    }\r\n});","import { AppBar, IconButton, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { styles } from \"../views/MainStyles\";\r\n\r\ninterface HeaderProps extends WithStyles<typeof styles> {\r\n    onDrawerToggle: () => void;\r\n}\r\n\r\nexport const Header = withStyles(styles)(({classes, onDrawerToggle}: HeaderProps) => (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"Open drawer\"\r\n                onClick={onDrawerToggle}\r\n                className={classes.menuButton}\r\n            >\r\n                <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                Google Code Jam Statistics\r\n            </Typography>\r\n        </Toolbar>\r\n    </AppBar>\r\n));","import { CircularProgress, Drawer, Hidden, List, ListItem, ListItemText, WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { Round } from \"../model/Round\";\r\nimport { styles } from \"../views/MainStyles\";\r\nimport { Header } from \"./Header\";\r\n\r\ninterface SidebarProps extends WithStyles<typeof styles>, WithTheme {\r\n    isLoading: boolean;\r\n    rounds: Round[];\r\n    onRoundClicked: (round: Round) => void;\r\n}\r\n\r\ninterface SidebarState {\r\n    isDrawerOpen: boolean;\r\n}\r\n\r\nexport const Sidebar = withStyles(styles, {withTheme: true})(class extends Component<SidebarProps, SidebarState> {\r\n    state: SidebarState = {\r\n        isDrawerOpen: false\r\n    }\r\n\r\n    renderDrawer() {\r\n        const {classes, isLoading, rounds, onRoundClicked} = this.props;\r\n        return (\r\n            isLoading\r\n            ? <CircularProgress className={classes.progress} />\r\n            :\r\n            <List>\r\n                {rounds.map(round =>\r\n                    <ListItem key={round.id} button>\r\n                        <ListItemText\r\n                            primary={`${round.displayName} ${round.year}`}\r\n                            onClick={() => onRoundClicked(round)}\r\n                        />\r\n                    </ListItem>\r\n                )}\r\n            </List>\r\n        );\r\n    }\r\n\r\n    handleDrawerToggle = () => {\r\n        this.setState({isDrawerOpen: !this.state.isDrawerOpen});\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                <Header onDrawerToggle={this.handleDrawerToggle} />\r\n                <nav className={classes.drawer}>\r\n                    <Hidden smUp implementation=\"css\">\r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"temporary\"\r\n                            anchor={this.props.theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n                            open={this.state.isDrawerOpen}\r\n                            onClose={this.handleDrawerToggle}\r\n                            classes={{\r\n                                paper: classes.drawerPaper\r\n                            }}\r\n                        >\r\n                            {this.renderDrawer()}\r\n                        </Drawer>\r\n                    </Hidden>\r\n                    <Hidden xsDown implementation=\"css\"> \r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"permanent\"\r\n                            classes={{\r\n                                paper: classes.drawerPaper\r\n                            }}\r\n                            open\r\n                        >\r\n                            <div className={classes.toolbar}/>\r\n                            {this.renderDrawer()}\r\n                        </Drawer>\r\n                    </Hidden>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n});","import { withStyles, WithStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { RoundContainer } from \"../components/RoundContainer\";\r\nimport { Sidebar } from \"../components/Sidebar\";\r\nimport { Round } from \"../model/Round\";\r\nimport { fetchConfig } from \"../utils/api\";\r\nimport { styles } from \"./MainStyles\";\r\n\r\ninterface MainViewState {\r\n    rounds: Round[];\r\n    isLoading: boolean;\r\n    selectedRound?: Round;\r\n}\r\n\r\ninterface MainViewProps extends WithStyles<typeof styles> {}\r\n\r\nexport const MainView = withStyles(styles)(class extends Component<MainViewProps, MainViewState> {\r\n    state: MainViewState = {\r\n        rounds: [],\r\n        isLoading: true\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const config = await fetchConfig();\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        this.setState({\r\n            rounds: config.rounds,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, rounds, selectedRound} = this.state;\r\n        const classes = this.props.classes;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Sidebar\r\n                    {...this.props}\r\n                    isLoading={isLoading}\r\n                    rounds={rounds}\r\n                    onRoundClicked={round => this.setState({selectedRound: round})}\r\n                />\r\n                <RoundContainer\r\n                    {...this.props}\r\n                    round={selectedRound}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\n// export const MainView = withStyles(styles)(MainView);","import React, { Component } from \"react\";\r\nimport { Round } from \"./model/Round\";\r\nimport { fetchConfig } from \"./utils/api\";\r\nimport { Switch, Route } from \"react-router\";\r\nimport { MainView } from \"./views/MainView\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { RoundView } from \"./views/RoundView\";\r\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { pink, indigo } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: indigo,\r\n        secondary: pink,\r\n        type: \"light\"\r\n    },\r\n    typography: {\r\n        useNextVariants: true\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                <React.Fragment>\r\n                    <CssBaseline />\r\n                    <MainView />\r\n                </React.Fragment>\r\n            </MuiThemeProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}