{"version":3,"sources":["utils/api.ts","components/views/MainView.tsx","components/views/RoundView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["client","applyConverters","axios","create","handleErrors","r","status","Error","statusText","data","fetchRoundInfo","roundId","get","concat","then","fetchRoundResults","MainView","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","rounds","isLoading","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","config","wrap","_context","prev","next","sent","setState","stop","react_default","createElement","renderLoading","index_es","map","round","button","id","react_router_dom","to","displayName","Component","RoundView","roundInfo","undefined","roundResults","roundInfoPromise","roundResultsPromise","_ref","_ref2","info","results","props","match","params","Promise","all","slicedToArray","_this$state","challenge","additionalInfo","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d012c79.chunk.js","sourcesContent":["import axios, { AxiosResponse, AxiosInstance } from \"axios\";\nimport { Config } from \"../model/Config\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport applyConverters from \"axios-case-converter\";\nimport { RoundResult } from \"../model/RoundResult\";\n\nconst client = applyConverters(axios.create() as any) as AxiosInstance;\n\nconst handleErrors = <T>(r: AxiosResponse<T>) => {\n    if (r.status < 200 || r.status >= 300) throw new Error(r.status + \": \" + r.statusText);\n    return r.data;\n};\n\nexport const fetchConfig = () =>\n    client\n        .get<Config>(\"config.json\")\n        .then(handleErrors)\n\nexport const fetchRoundInfo = (roundId: string) =>\n    client\n        .get<RoundInfo>(`round_data/info/${roundId}.json`)\n        .then(handleErrors);\n\nexport const fetchRoundResults = (roundId: string) =>\n    client\n        .get<RoundResult[]>(`round_data/scores/${roundId}.json`)\n        .then(handleErrors);","import React, { Component } from \"react\";\nimport { Round } from \"../../model/Round\";\nimport { fetchConfig } from \"../../utils/api\";\nimport { Link } from \"react-router-dom\";\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\n\ninterface MainViewState {\n    rounds: Round[];\n    isLoading: boolean;\n}\n\nexport class MainView extends Component<{}, MainViewState> {\n    state: MainViewState = {\n        rounds: [],\n        isLoading: true\n    };\n\n    async componentDidMount() {\n        const config = await fetchConfig();\n        this.setState({\n            rounds: config.rounds,\n            isLoading: false\n        });\n    }\n\n    renderLoading() {\n        return <div>Loading...</div>;\n    }\n\n    render() {\n        if(this.state.isLoading) return this.renderLoading();\n        return (\n            <div>\n                <List>\n                    { this.state.rounds.map(round =>\n                        <ListItem button key={round.id}>\n                            {/* <Link to={`round/${round.id}`}>{round.displayName}</Link> */}\n                            <Link to={`round/${round.id}`}>\n                                <ListItemText>\n                                    {round.displayName}\n                                </ListItemText>\n                            </Link>\n                        </ListItem>\n                    )}\n                </List>\n                {/* <ul>\n                    { this.state.rounds.map(round =>\n                        <li>\n                            <Link to={`round/${round.id}`}>{round.displayName}</Link>\n                        </li>\n                    ) }\n                </ul> */}\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { RouteProps, RouteComponentProps } from \"react-router\";\nimport { RoundInfo } from \"../../model/RoundInfo\";\nimport { RoundResult } from \"../../model/RoundResult\";\nimport { fetchRoundInfo, fetchRoundResults } from \"../../utils/api\";\n\nexport interface RoundViewState {\n    roundInfo?: RoundInfo;\n    roundResults: RoundResult[];\n    isLoading: boolean;\n}\n\nexport class RoundView extends Component<RouteComponentProps<{id: string}>, RoundViewState> {\n    state: RoundViewState = {\n        roundInfo: undefined,\n        roundResults: [],\n        isLoading: true\n    }\n\n    async componentDidMount() {\n        const roundId = this.props.match.params.id;\n        const roundInfoPromise = fetchRoundInfo(roundId);\n        const roundResultsPromise = fetchRoundResults(roundId);\n        const [info, results] = await Promise.all([roundInfoPromise, roundResultsPromise]);\n        this.setState({\n            roundInfo: info,\n            roundResults: results,\n            isLoading: false\n        });\n    }\n    \n    renderLoading() {\n        return <div>Loading...</div>;\n    }\n\n    render() {\n        const {roundInfo, roundResults} = this.state;\n        if(this.state.isLoading || !roundInfo) return this.renderLoading();\n        return (\n            <div>\n                {roundInfo.challenge.additionalInfo}\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Round } from \"./model/Round\";\nimport { fetchConfig } from \"./utils/api\";\nimport { Switch, Route } from \"react-router\";\nimport { MainView } from \"./components/views/MainView\";\nimport { HashRouter } from \"react-router-dom\";\nimport { RoundView } from \"./components/views/RoundView\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={MainView} />\n                    <Route path=\"/round/:id\" component={RoundView} />\n                </Switch>\n            </HashRouter>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}