{"version":3,"sources":["utils/api.ts","styles/main.ts","components/widgets/NumberStatistic.tsx","utils/stats.ts","components/widgets/GroupedBarChart.tsx","components/RoundContainer.tsx","components/Header.tsx","components/Sidebar.tsx","views/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["client","applyConverters","axios","create","handleErrors","r","status","Error","statusText","data","fetchRoundInfo","roundId","get","concat","then","fetchRoundResults","mainStyles","theme","createStyles","root","display","appBar","zIndex","drawer","Object","defineProperty","breakpoints","up","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","unit","flexDirection","overflowX","toolbar","mixins","progress","margin","alignSelf","menuButton","marginRight","tableRoot","NumberStatistic","withStyles","objectSpread","card","textAlign","_ref","number","label","classes","react_default","a","createElement","index_es","className","variant","color","getParticipantsWithScore","results","score","filter","score_1","getTotalSubmissions","map","result","taskInfo","task","totalAttempts","sum","getParticipantsWithAtLeastOneSolved","length","getStatsByCountry","convert","compare","maxEntries","Map","Array","from","groupBy","index","arr","country","entries","kvp","sort","b","slice","GroupedBarChart","withTheme","title","react_chartjs_2_es","options","scales","xAxes","ticks","beginAtZero","labels","keys","datasets","backgroundColor","palette","primary","light","borderColor","dark","borderWidth","hoverBackgroundColor","secondary","hoverBorderColor","values","RoundContainer","_Component","_temp","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","isLoading","roundInfo","undefined","roundResults","inherits","createClass","key","value","_componentWillReceiveProps","asyncToGenerator","regenerator_default","mark","_callee","nextProps","info","wrap","_context","prev","next","props","abrupt","round","setState","id","sent","console","log","stop","_x","paragraph","maxScore","challenge","tasks","tests","test","getMaxScore","groupsByParticipants","getNumberOfParticipantsByCountry","groupsByAverageScore","average","getAverageScoreByCountry","groupsByTopScorers","getNumberOfParticipantsWithScoreByCountry","groupsByScore","minScore","groups","scores","i","push","groupByScore","container","item","xs","fullScoreboardSize","size","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","x","rank","displayname","renderStats","renderHelp","Component","Header","onDrawerToggle","position","aria-label","onClick","icons_index_es","noWrap","Sidebar","isDrawerOpen","handleDrawerToggle","toggleDrawer","_this2","_this$props","rounds","onRoundClicked","button","displayName","year","smUp","implementation","anchor","direction","open","onClose","paper","renderDrawer","xsDown","MainView","_componentDidMount","config","Promise","resolve","setTimeout","_this$state","selectedRound","assign","createMuiTheme","indigo","pink","type","typography","useNextVariants","App","core_styles","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb5697a5.chunk.js","sourcesContent":["import axios, { AxiosResponse, AxiosInstance } from \"axios\";\nimport { Config } from \"../model/Config\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport applyConverters from \"axios-case-converter\";\nimport { RoundResult } from \"../model/RoundResult\";\n\nconst client = applyConverters(axios.create() as any) as AxiosInstance;\n\nconst handleErrors = <T>(r: AxiosResponse<T>) => {\n    if (r.status < 200 || r.status >= 300) throw new Error(r.status + \": \" + r.statusText);\n    return r.data;\n};\n\nexport const fetchConfig = () =>\n    client\n        .get<Config>(\"config.json\")\n        .then(handleErrors)\n\nexport const fetchRoundInfo = (roundId: string) =>\n    client\n        .get<RoundInfo>(`round_data/info/${roundId}.json`)\n        .then(handleErrors);\n\nexport const fetchRoundResults = (roundId: string) =>\n    client\n        .get<RoundResult[]>(`round_data/scores/${roundId}.json`)\n        .then(handleErrors);","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\nconst drawerWidth = 240;\r\nexport const mainStyles = (theme: Theme) => createStyles({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        }\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing.unit * 3,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        overflowX: \"auto\"\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    progress: {\r\n        margin: theme.spacing.unit*2,\r\n        alignSelf: \"center\"\r\n    },\r\n    menuButton: {\r\n        marginRight: 20,\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n        },\r\n    },\r\n    tableRoot: {\r\n        overflowX: \"auto\"\r\n    }\r\n});","import React from \"react\";\nimport { withStyles, WithStyles, Theme, createStyles, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { mainStyles } from \"../../styles/main\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles,\n    card: {\n        textAlign: \"center\"\n    }\n});\n\ninterface NumberStatisticProps extends WithStyles<typeof styles> {\n    number: number;\n    label: string;\n}\n\nexport const NumberStatistic = withStyles(styles)(\n    ({number, label, classes}: NumberStatisticProps) => (\n        <Card>\n            <CardContent className={classes.card}>\n                <Typography variant=\"h2\">\n                    {number}\n                </Typography>\n                <Typography color=\"textSecondary\">\n                    {label}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n);","import { RoundInfo } from \"../model/RoundInfo\";\nimport \"typescript-array-extensions\";\nimport { RoundResult } from \"../model/RoundResult\";\n\nexport const getMaxScore = (roundInfo: RoundInfo) =>\n    roundInfo\n        .challenge\n        .tasks\n        .map(task =>\n            task.tests\n                .map(test=>test.value)\n                .sum()\n        )\n        .sum();\n\nexport const getParticipantsWithScore = (results: RoundResult[], score: number) =>\n    results.filter(r => r.score_1 === score);\n\nexport const getTotalSubmissions = (results: RoundResult[]) =>\n    results.map(result =>\n        result\n            .taskInfo\n            .map(task => task.totalAttempts)\n            .sum()\n    )\n    .sum();\n\nexport const getParticipantsWithAtLeastOneSolved = (results: RoundResult[]) =>\n    results.filter(result =>\n        result\n            .taskInfo\n            .filter(task => task.score > 0)\n            .length > 0\n    );\n\nexport const getNumberOfParticipantsByCountry = (results: RoundResult[], maxEntries?: number) =>\n    getStatsByCountry(\n        results,\n        r => r.length,\n        (a, b) => -a+b,\n        maxEntries\n    );\n\nexport const getAverageScoreByCountry = (results: RoundResult[], maxEntries?: number) =>\n    getStatsByCountry(\n        results,\n        r => r.map(result => result.score_1).average(),\n        (a, b) => -a+b,\n        maxEntries\n    );\n\nexport const getNumberOfParticipantsWithScoreByCountry = (results: RoundResult[], score: number, maxEntries?: number) => \n    getStatsByCountry(\n        results,\n        r => r.filter(result => result.score_1 === score).length,\n        (a, b) => -a+b,\n        maxEntries\n    );\n\nexport const groupByScore = (results: RoundResult[], minScore: number, maxScore: number) => {\n    const groups = new Map(Array.from(\n            results.groupBy((result, index, arr) => result.score_1)\n        )\n        .map(kvp => [kvp[0], kvp[1].length] as [number, number])\n        .sort((a, b) => a[0]-b[0])\n    );\n    const scores = [];\n    for(let i = minScore; i <= maxScore; i++) scores.push(i);\n    return new Map(scores.map(score => [score, groups.get(score) || 0]));\n}\n\nexport const getStatsByCountry = <T>(\n        results: RoundResult[],\n        convert: (result: RoundResult[]) => T,\n        compare: (a: T, b: T) => number,\n        maxEntries?: number) =>\n            new Map(Array.from(\n                results\n                    .groupBy((result, index, arr) => result.country)\n                    .entries()\n            )\n            .map(kvp => [kvp[0], convert(kvp[1])] as [string, T])\n            .sort((a, b) => compare(a[1], b[1]))\n            .slice(0, maxEntries)\n)\n","import React from \"react\";\nimport { WithTheme, WithStyles, withStyles } from \"@material-ui/core\";\nimport { mainStyles } from \"../../styles/main\";\nimport { HorizontalBar } from \"react-chartjs-2\";\n\ninterface GroupedBarChartProps extends WithStyles<typeof mainStyles>, WithTheme {\n    data: Map<string, number>;\n    title: string;\n}\n\nexport const GroupedBarChart = withStyles(mainStyles, {withTheme: true})(({data, title, theme}: GroupedBarChartProps) => (\n    <HorizontalBar\n        options={{\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }}\n        data={{\n            labels: Array.from(data.keys()),\n            datasets:[\n                {\n                    label: title,\n                    backgroundColor: theme.palette.primary.light,\n                    borderColor: theme.palette.primary.dark,\n                    borderWidth: 1,\n                    hoverBackgroundColor: theme.palette.secondary.light,\n                    hoverBorderColor: theme.palette.secondary.dark,\n                    data: Array.from(data.values())\n                }\n            ]\n        }}\n    />\n));","import { CircularProgress, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography, WithStyles, Grid, Tabs, Tab, WithTheme, withStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { Round } from \"../model/Round\";\r\nimport { RoundInfo } from \"../model/RoundInfo\";\r\nimport { RoundResult } from \"../model/RoundResult\";\r\nimport { fetchRoundInfo, fetchRoundResults } from \"../utils/api\";\r\nimport { mainStyles } from \"../styles/main\";\r\nimport { NumberStatistic } from \"./widgets/NumberStatistic\";\r\nimport { getMaxScore, getTotalSubmissions, getParticipantsWithAtLeastOneSolved, getParticipantsWithScore, getNumberOfParticipantsByCountry, getAverageScoreByCountry, getNumberOfParticipantsWithScoreByCountry, groupByScore } from \"../utils/stats\";\r\nimport { GroupedBarChart } from \"./widgets/GroupedBarChart\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\ninterface RoundContainerProps extends WithStyles<typeof mainStyles>, WithTheme {\r\n    round?: Round;\r\n}\r\n\r\ninterface RoundContainerState {\r\n    isLoading: boolean;\r\n    roundInfo?: RoundInfo;\r\n    roundResults: RoundResult[]\r\n}\r\n\r\nexport const RoundContainer = withStyles(mainStyles, {withTheme: true})(\r\n    class extends Component<RoundContainerProps, RoundContainerState> {\r\n        state: RoundContainerState = {\r\n            isLoading: false,\r\n            roundInfo: undefined,\r\n            roundResults: []\r\n        }\r\n\r\n        async componentWillReceiveProps(nextProps: RoundContainerProps) {\r\n            if(this.props == nextProps) return;\r\n            if(!nextProps.round) {\r\n                this.setState({isLoading: false, roundInfo: undefined, roundResults: []});\r\n                return;\r\n            }\r\n            this.setState({isLoading: true});\r\n            const roundId = nextProps.round.id;\r\n            const info = await fetchRoundInfo(roundId);\r\n            const results = await fetchRoundResults(roundId);\r\n            console.log(info, results);\r\n            this.setState({isLoading: false, roundInfo: info, roundResults: results});\r\n        }\r\n\r\n        renderHelp() {\r\n            return (\r\n                <Typography paragraph>\r\n                    Please select a round from the side menu.\r\n                </Typography>\r\n            )\r\n        }\r\n\r\n        renderStats(roundInfo: RoundInfo, results: RoundResult[]) {\r\n            const maxScore = getMaxScore(roundInfo);\r\n            const maxEntries = 20;\r\n            const groupsByParticipants = getNumberOfParticipantsByCountry(results, maxEntries);\r\n            const groupsByAverageScore = getAverageScoreByCountry(results, maxEntries);\r\n            const groupsByTopScorers = getNumberOfParticipantsWithScoreByCountry(results, maxScore, maxEntries);\r\n            const groupsByScore = groupByScore(results, 0, maxScore);\r\n            console.log(groupsByScore);\r\n            return (\r\n                <Grid container spacing={16}>\r\n                    <Grid item xs={3}>\r\n                        <NumberStatistic\r\n                            number={roundInfo.fullScoreboardSize}\r\n                            label=\"participants worldwide\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <NumberStatistic\r\n                            number={getParticipantsWithScore(results, maxScore).length}\r\n                            label=\"perfect scores\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <NumberStatistic\r\n                            number={getTotalSubmissions(results)}\r\n                            label=\"submissions in total\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <NumberStatistic\r\n                            number={getParticipantsWithAtLeastOneSolved(results).length}\r\n                            label=\"people solved at least one test set\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <GroupedBarChart\r\n                            data={groupsByParticipants}\r\n                            title={`Number of participants per country (top ${groupsByParticipants.size})`}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <GroupedBarChart\r\n                            data={groupsByAverageScore}\r\n                            title={`Top ${groupsByAverageScore.size} countries by average score`}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <GroupedBarChart\r\n                            data={groupsByTopScorers}\r\n                            title={`Top ${groupsByTopScorers.size} countries with the most top-scorers`}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Line\r\n                            data={{\r\n                                labels: Array.from(groupsByScore.keys()),\r\n                                datasets: [\r\n                                    {\r\n                                    label: 'Point distribution',\r\n                                    fill: false,\r\n                                    lineTension: 0.1,\r\n                                    backgroundColor: this.props.theme.palette.primary.light,\r\n                                    borderColor: this.props.theme.palette.primary.dark,\r\n                                    borderCapStyle: 'butt',\r\n                                    borderDash: [],\r\n                                    borderDashOffset: 0.0,\r\n                                    borderJoinStyle: 'miter',\r\n                                    pointBorderColor: this.props.theme.palette.primary.dark,\r\n                                    pointBackgroundColor: '#fff',\r\n                                    pointBorderWidth: 1,\r\n                                    pointHoverRadius: 5,\r\n                                    pointHoverBackgroundColor: this.props.theme.palette.secondary.light,\r\n                                    pointHoverBorderColor: this.props.theme.palette.secondary.dark,\r\n                                    pointHoverBorderWidth: 2,\r\n                                    pointRadius: 1,\r\n                                    pointHitRadius: 10,\r\n                                    data: Array.from(groupsByScore.values())\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={this.props.classes.tableRoot}>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Rank</TableCell>\r\n                                        <TableCell>Username</TableCell>\r\n                                        <TableCell>Score</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {results\r\n                                        .filter(x => x.country == \"Lithuania\")\r\n                                        .sort((a, b) => a.rank-b.rank)\r\n                                        .map((result, i) =>\r\n                                            <TableRow key={i}>\r\n                                                <TableCell>{result.rank}</TableCell>\r\n                                                <TableCell>{result.displayname}</TableCell>\r\n                                                <TableCell>{result.score_1}</TableCell>\r\n                                            </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <main className={this.props.classes.content}>\r\n                    <div className={this.props.classes.toolbar} />\r\n                    { this.state.isLoading\r\n                    ? <CircularProgress className={this.props.classes.progress} color=\"secondary\" />\r\n                    : !this.state.roundInfo\r\n                    ? this.renderHelp()\r\n                    : this.renderStats(this.state.roundInfo, this.state.roundResults)\r\n                    }\r\n                </main>\r\n            )\r\n        }\r\n    }\r\n);","import { AppBar, IconButton, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { mainStyles } from \"../styles/main\";\r\n\r\ninterface HeaderProps extends WithStyles<typeof mainStyles> {\r\n    onDrawerToggle: () => void;\r\n}\r\n\r\nexport const Header = withStyles(mainStyles)(({classes, onDrawerToggle}: HeaderProps) => (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"Open drawer\"\r\n                onClick={onDrawerToggle}\r\n                className={classes.menuButton}\r\n            >\r\n                <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                Google Code Jam Statistics\r\n            </Typography>\r\n        </Toolbar>\r\n    </AppBar>\r\n));","import { CircularProgress, Drawer, Hidden, List, ListItem, ListItemText, WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { Round } from \"../model/Round\";\r\nimport { mainStyles } from \"../styles/main\";\r\nimport { Header } from \"./Header\";\r\n\r\ninterface SidebarProps extends WithStyles<typeof mainStyles>, WithTheme {\r\n    isLoading: boolean;\r\n    rounds: Round[];\r\n    onRoundClicked: (round: Round) => void;\r\n}\r\n\r\ninterface SidebarState {\r\n    isDrawerOpen: boolean;\r\n}\r\n\r\nexport const Sidebar = withStyles(mainStyles, {withTheme: true})(class extends Component<SidebarProps, SidebarState> {\r\n    state: SidebarState = {\r\n        isDrawerOpen: false\r\n    }\r\n\r\n    renderDrawer(toggleDrawer: boolean) {\r\n        const {classes, isLoading, rounds, onRoundClicked} = this.props;\r\n        return (\r\n            isLoading\r\n            ? <CircularProgress className={classes.progress} />\r\n            :\r\n            <List>\r\n                {rounds.map(round =>\r\n                    <ListItem key={round.id} button>\r\n                        <ListItemText\r\n                            primary={`${round.displayName} ${round.year}`}\r\n                            onClick={() => {\r\n                                if(toggleDrawer) this.handleDrawerToggle();\r\n                                onRoundClicked(round);\r\n                            }}\r\n                        />\r\n                    </ListItem>\r\n                )}\r\n            </List>\r\n        );\r\n    }\r\n\r\n    handleDrawerToggle = () => {\r\n        this.setState({isDrawerOpen: !this.state.isDrawerOpen});\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                <Header onDrawerToggle={this.handleDrawerToggle} />\r\n                <nav className={classes.drawer}>\r\n                    <Hidden smUp implementation=\"css\">\r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"temporary\"\r\n                            anchor={this.props.theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n                            open={this.state.isDrawerOpen}\r\n                            onClose={this.handleDrawerToggle}\r\n                            classes={{\r\n                                paper: classes.drawerPaper\r\n                            }}\r\n                        >\r\n                            {this.renderDrawer(true)}\r\n                        </Drawer>\r\n                    </Hidden>\r\n                    <Hidden xsDown implementation=\"css\"> \r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"permanent\"\r\n                            classes={{\r\n                                paper: classes.drawerPaper\r\n                            }}\r\n                            open\r\n                        >\r\n                            <div className={classes.toolbar}/>\r\n                            {this.renderDrawer(false)}\r\n                        </Drawer>\r\n                    </Hidden>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n});","import { withStyles, WithStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { RoundContainer } from \"../components/RoundContainer\";\r\nimport { Sidebar } from \"../components/Sidebar\";\r\nimport { Round } from \"../model/Round\";\r\nimport { fetchConfig } from \"../utils/api\";\r\nimport { mainStyles } from \"../styles/main\";\r\n\r\ninterface MainViewState {\r\n    rounds: Round[];\r\n    isLoading: boolean;\r\n    selectedRound?: Round;\r\n}\r\n\r\ninterface MainViewProps extends WithStyles<typeof mainStyles> {}\r\n\r\nexport const MainView = withStyles(mainStyles)(class extends Component<MainViewProps, MainViewState> {\r\n    state: MainViewState = {\r\n        rounds: [],\r\n        isLoading: true\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const config = await fetchConfig();\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        this.setState({\r\n            rounds: config.rounds,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, rounds, selectedRound} = this.state;\r\n        const classes = this.props.classes;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Sidebar\r\n                    {...this.props}\r\n                    isLoading={isLoading}\r\n                    rounds={rounds}\r\n                    onRoundClicked={round => this.setState({selectedRound: round})}\r\n                />\r\n                <RoundContainer\r\n                    {...this.props}\r\n                    round={selectedRound}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\n// export const MainView = withStyles(styles)(MainView);","import React, { Component } from \"react\";\nimport { Round } from \"./model/Round\";\nimport { fetchConfig } from \"./utils/api\";\nimport { Switch, Route } from \"react-router\";\nimport { MainView } from \"./views/MainView\";\nimport { HashRouter } from \"react-router-dom\";\nimport { RoundView } from \"./views/RoundView\";\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport { pink, indigo } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: indigo,\n        secondary: pink,\n        type: \"light\"\n    },\n    typography: {\n        useNextVariants: true\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <React.Fragment>\n                    <CssBaseline />\n                    <MainView />\n                </React.Fragment>\n            </MuiThemeProvider>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"chart.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}