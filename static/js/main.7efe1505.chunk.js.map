{"version":3,"sources":["styles/main.ts","utils/api.ts","model/Round.ts","utils/stats.ts","components/widgets/NumberStatistic.tsx","components/widgets/ResultsTable.tsx","components/widgets/BarChart.tsx","components/GlobalResultsGrid.tsx","components/CountryResultsGrid.tsx","utils/countries.ts","components/CountrySelect.tsx","components/TaskStatsCapsule.tsx","components/TaskCard.tsx","utils/task.ts","components/TaskGrid.tsx","components/RoundContainer.tsx","components/icons/Github.tsx","components/Header.tsx","components/Sidebar.tsx","views/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["mainStyles","theme","createStyles","root","display","appBar","zIndex","drawer","breakpoints","up","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","flexDirection","overflowX","toolbar","mixins","progress","margin","alignSelf","menuButton","marginRight","tableRoot","axiosInstance","axios","create","baseURL","handleErrors","r","status","Error","statusText","data","fetchRoundInfo","roundId","get","then","fetchRoundResults","QualificationType","getMaxScore","roundInfo","challenge","tasks","map","task","tests","test","value","sum","getParticipantsWithScore","results","score","filter","score1","getTotalSubmissions","result","taskInfo","totalAttempts","getParticipantsWithAtLeastOneSolved","length","groupByScore","minScore","maxScore","groups","Map","Array","from","groupBy","index","arr","kvp","sort","a","b","scores","i","push","getStatsByCountry","convert","compare","maxEntries","country","entries","slice","isQualificationEnabled","qualification","undefined","type","NONE","didQualify","RANK","rank","threshold","SCORE","NumberStatistic","withStyles","card","textAlign","number","label","classes","Card","CardContent","className","Typography","variant","color","buildColumnHeadersList","showCountry","name","options","searchable","download","ResultsTable","withTheme","Paper","title","displayname","Icon","Check","Clear","buildRowData","columns","print","rowsPerPageOptions","rowsPerPage","responsive","selectableRows","viewColumns","BarChartType","BarChart","props","HORIZONTAL","scales","xAxes","ticks","beginAtZero","text","legend","labels","keys","datasets","backgroundColor","palette","primary","light","borderColor","dark","borderWidth","hoverBackgroundColor","secondary","hoverBorderColor","values","renderHorizontal","barPercentage","categoryPercentage","renderVertical","GlobalResultsGrid","round","groupsByParticipants","getNumberOfParticipantsByCountry","groupsByAverageScore","average","getAverageScoreByCountry","groupsByTopScorers","getNumberOfParticipantsWithScoreByCountry","groupsByScore","Grid","container","item","xs","sm","md","fullScoreboardSize","size","VERTICAL","CountryResultsGrid","countries","distinct","getValue","CountrySelect","countrySelect","fontFamily","typography","selectedCountry","onSelectionChanged","defaultValue","isSearchable","concat","c","onChange","e","blues","getStatText","stat","N","participantCount","p","participantPercentage","toFixed","P","points","K","solvedTestSetCount","TaskStatsCapsule","capsule","height","borderRadius","overflow","capsulePart","t","reverse","totalValue","reduce","s","testSetCount","countedParticipants","numSolved","res","numAttempted","calculateSolvedParts","Tooltip","placement","key","style","Math","max","TaskCard","taskTitle","whiteSpace","textOverflow","titleContainer","justifyContent","alignItems","pointsContainer","marginBottom","Link","target","href","id","fontSize","join","v","TaskGrid","taskContainer","gridTemplateColumns","gridGap","RoundContainer","Component","state","isLoading","roundResults","componentWillReceiveProps","nextProps","setState","info","console","log","renderHelp","paragraph","renderStats","this","toUpperCase","gutterBottom","render","CircularProgress","Github","SvgIcon","d","Header","onDrawerToggle","AppBar","position","Toolbar","IconButton","aria-label","onClick","Menu","noWrap","Date","document","lastModified","getUTCFullYear","toString","padStart","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","formatLastUpdateDate","component","Sidebar","isDrawerOpen","renderOfficialRoundLink","toggleDrawer","ListItem","button","ListItemText","disableTypography","handleDrawerToggle","onRoundClicked","displayName","year","renderUnofficialRoundLink","Badge","renderDrawer","rounds","List","areResultsOfficial","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","xsDown","MainView","componentDidMount","config","Promise","resolve","setTimeout","selectedRound","createMuiTheme","indigo","pink","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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AC5J,QAAS,GACrB,kBAAC2J,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAAC9E,EAAD,CACII,OAAQhD,EAAQS,OAChBwC,MAAM,kBAGd,kBAACoE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAAC9E,EAAD,CACII,OAAQjD,EAAyBC,EAASY,GAAUH,OACpDwC,MAAM,oBAGd,kBAACoE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAAC9E,EAAD,CACII,OAAQxC,EAAoCR,GAASS,OACrDwC,MAAM,yCAGd,kBAACoE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1B,kBAAC9E,EAAD,CACII,OAAQhD,EAAQE,OAAOxB,GAAK6D,EAAW7D,EAAGkI,EAAMzE,gBAAgB1B,OAChEwC,MAAM,yCAGd,kBAACoE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACxC,EAAD,CACI3C,KAAM0C,EAAa8C,SACnB/I,KAAMsI,EACNlD,MAAM,qBACNjB,MAAM,4BAGd,kBAACoE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACzD,EAAD,CACI/D,QAASA,EACTmC,cAAeyE,EAAMzE,cACrBuB,aAAa,QCzDxBqE,EAAY,CACrB,cACA,UACA,UACA,iBACA,UACA,SACA,WACA,aACA,YACA,UACA,YACA,UACA,aACA,UACA,aACA,UACA,UACA,QACA,UACA,yBACA,WACA,SACA,iCACA,yBACA,SACA,WACA,eACA,WACA,WACA,SACA,iBACA,OACA,QACA,QACA,WACA,cACA,mBACA,aACA,UACA,OACA,SACA,iBACA,mBACA,oBACA,UACA,WACA,qBACA,UACA,QACA,cACA,UACA,WACA,OACA,UACA,SACA,QACA,UACA,UACA,QACA,SACA,YACA,WACA,SACA,QACA,YACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,cACA,SACA,QACA,UACA,QACA,SACA,SACA,aACA,QACA,SACA,SACA,aACA,OACA,SACA,UACA,gBACA,YACA,aACA,QACA,oBACA,aACA,SACA,WACA,QACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,kBACA,UACA,QACA,cACA,cACA,YACA,QACA,UACA,cACA,SACA,WACA,YACA,SACA,WACA,OACA,cACA,SACA,WACA,cACA,QACA,UACA,SACA,SACA,aACA,eACA,UACA,SACA,YACA,eACA,WACA,WACA,UACA,eACA,+CACA,cACA,QACA,YACA,QACA,YACA,SACA,cACA,QACA,SACA,aACA,WACA,OACA,sBACA,UACA,SACA,eACA,2BACA,8BACA,sBACA,SACA,UACA,uBACA,iBACA,gBACA,UACA,aACA,eACA,YACA,UACA,QACA,WACA,mBACA,cACA,UACA,UACA,iBACA,UACA,SACA,aACA,YACA,UACA,YACA,UACA,aACA,UACA,aACA,UACA,UACA,QACA,SACA,UACA,yBACA,WACA,SACA,yBACA,WACA,eACA,UACA,WACA,WACA,SACA,iBACA,QACA,QACA,WACA,cACA,aACA,UACA,OACA,SACA,iBACA,mBACA,oBACA,UACA,WACA,qBACA,UACA,QACA,cACA,UACA,WACA,OACA,UACA,SACA,UACA,UACA,QACA,SACA,YACA,aACA,YACA,WACA,SACA,QACA,WACA,YACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,SACA,aACA,QACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,gBACA,YACA,aACA,QACA,oBACA,aACA,WACA,QACA,aACA,YACA,SACA,UACA,SACA,WACA,UACA,aACA,kBACA,QACA,cACA,cACA,YACA,UACA,cACA,SACA,OACA,WACA,YACA,SACA,WACA,OACA,cACA,SACA,WACA,cACA,UACA,SACA,SACA,aACA,eACA,UACA,SACA,YACA,WACA,WACA,UACA,eACA,+CACA,cACA,QACA,YACA,QACA,SACA,cACA,QACA,SACA,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","file":"static/js/main.7efe1505.chunk.js","sourcesContent":["import { createStyles, Theme } from \"@material-ui/core\";\n\nconst drawerWidth = 240;\nexport const mainStyles = (theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1\n        },\n        drawer: {\n            [theme.breakpoints.up(\"sm\")]: {\n                width: drawerWidth,\n                flexShrink: 0\n            }\n        },\n        drawerPaper: {\n            width: drawerWidth\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            display: \"flex\",\n            flexDirection: \"column\",\n            overflowX: \"auto\"\n        },\n        toolbar: theme.mixins.toolbar,\n        progress: {\n            margin: theme.spacing(2),\n            alignSelf: \"center\"\n        },\n        menuButton: {\n            marginRight: 20,\n            [theme.breakpoints.up(\"sm\")]: {\n                display: \"none\"\n            }\n        },\n        tableRoot: {\n            overflowX: \"auto\"\n        }\n    });\n","import axios, { AxiosResponse } from \"axios\";\nimport { Config } from \"../model/Config\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { RoundResult } from \"../model/RoundResult\";\n\nconst axiosInstance = axios.create({\n    baseURL: \"/google_codejam_stats\"\n})\n\nconst handleErrors = <T>(r: AxiosResponse<T>) => {\n    if (r.status < 200 || r.status >= 300)\n        throw new Error(r.status + \": \" + r.statusText);\n    return r.data;\n};\n\nexport const fetchConfig = () =>\n    axiosInstance.get<Config>(\"config.json\").then(handleErrors);\n\nexport const fetchRoundInfo = (roundId: string) =>\n    axiosInstance.get<RoundInfo>(`round_data/info/${roundId}.json`).then(handleErrors);\n\nexport const fetchRoundResults = (roundId: string) =>\n    axiosInstance\n        .get<RoundResult[]>(`round_data/scores/${roundId}.json`)\n        .then(handleErrors);\n","export enum QualificationType {\n    NONE = \"NONE\",\n    SCORE = \"SCORE\",\n    RANK = \"RANK\"\n}\n\ntype DisabledRoundQualification = {\n    type: QualificationType.NONE;\n};\n\ntype EnabledRoundQualification = {\n    type: QualificationType.SCORE | QualificationType.RANK;\n    threshold: number;\n};\n\nexport type RoundQualification =\n    | DisabledRoundQualification\n    | EnabledRoundQualification;\n\nexport interface Round {\n    id: string;\n    year: number;\n    displayName: string;\n    qualification: RoundQualification;\n    areResultsOfficial: boolean;\n}\n","import \"typescript-array-extensions\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { RoundQualification, QualificationType } from \"../model/Round\";\n\nexport const getMaxScore = (roundInfo: RoundInfo) =>\n    roundInfo.challenge.tasks\n        .map(task => task.tests.map(test => test.value).sum())\n        .sum();\n\nexport const getParticipantsWithScore = (\n    results: RoundResult[],\n    score: number\n) => results.filter(r => r.score1 === score);\n\nexport const getTotalSubmissions = (results: RoundResult[]) =>\n    results\n        .map(result => result.taskInfo.map(task => task.totalAttempts).sum())\n        .sum();\n\nexport const getParticipantsWithAtLeastOneSolved = (results: RoundResult[]) =>\n    results.filter(\n        result => result.taskInfo.filter(task => task.score > 0).length > 0\n    );\n\nexport const getNumberOfParticipantsByCountry = (\n    results: RoundResult[],\n    maxEntries?: number\n) => getStatsByCountry(results, r => r.length, (a, b) => -a + b, maxEntries);\n\nexport const getAverageScoreByCountry = (\n    results: RoundResult[],\n    maxEntries?: number\n) =>\n    getStatsByCountry(\n        results,\n        r => r.map(result => result.score1).average(),\n        (a, b) => -a + b,\n        maxEntries\n    );\n\nexport const getNumberOfParticipantsWithScoreByCountry = (\n    results: RoundResult[],\n    score: number,\n    maxEntries?: number\n) =>\n    getStatsByCountry(\n        results,\n        r => r.filter(result => result.score1 === score).length,\n        (a, b) => -a + b,\n        maxEntries\n    );\n\nexport const groupByScore = (\n    results: RoundResult[],\n    minScore: number,\n    maxScore: number\n) => {\n    const groups = new Map(\n        Array.from(results.groupBy((result, index, arr) => result.score1))\n            .map(kvp => [kvp[0], kvp[1].length] as [number, number])\n            .sort((a, b) => a[0] - b[0])\n    );\n    const scores = [];\n    for (let i = minScore; i <= maxScore; i++) scores.push(i);\n    return new Map(scores.map(score => [score, groups.get(score) || 0]));\n};\n\nexport const getStatsByCountry = <T>(\n    results: RoundResult[],\n    convert: (result: RoundResult[]) => T,\n    compare: (a: T, b: T) => number,\n    maxEntries?: number\n) =>\n    new Map(\n        Array.from(\n            results.groupBy((result, index, arr) => result.country).entries()\n        )\n            .map(kvp => [kvp[0], convert(kvp[1])] as [string, T])\n            .sort((a, b) => compare(a[1], b[1]))\n            .slice(0, maxEntries)\n    );\n\nexport const isQualificationEnabled = (\n    qualification?: RoundQualification\n): qualification is RoundQualification =>\n    qualification !== undefined &&\n    qualification.type !== QualificationType.NONE;\n\nexport const didQualify = (\n    result: RoundResult,\n    qualification: RoundQualification\n) =>\n    qualification.type === QualificationType.RANK\n        ? result.rank <= qualification.threshold\n        : qualification.type === QualificationType.SCORE\n        ? result.score1 >= qualification.threshold\n        : false;\n","import React from \"react\";\nimport { withStyles, WithStyles, Theme, createStyles, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { mainStyles } from \"../../styles/main\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles,\n    card: {\n        textAlign: \"center\"\n    }\n});\n\ninterface NumberStatisticProps extends WithStyles<typeof styles> {\n    number: number;\n    label: string;\n}\n\nexport const NumberStatistic = withStyles(styles)(\n    ({ number, label, classes }: NumberStatisticProps) => (\n        <Card>\n            <CardContent className={classes.card}>\n                <Typography variant=\"h2\">\n                    {number}\n                </Typography>\n                <Typography color=\"textSecondary\">\n                    {label}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n);","import React from \"react\";\nimport { mainStyles } from \"../../styles/main\";\nimport { WithStyles, WithTheme, withStyles, Paper, Icon } from \"@material-ui/core\";\nimport { isQualificationEnabled, didQualify } from \"../../utils/stats\";\nimport { RoundResult } from \"../../model/RoundResult\";\nimport { RoundQualification } from \"../../model/Round\";\nimport { Check, Clear } from \"@material-ui/icons\";\nimport MUIDataTable from \"mui-datatables\";\n\ninterface ResultsTableProps extends WithStyles<typeof mainStyles>, WithTheme {\n    results: RoundResult[];\n    qualification?: RoundQualification;\n    showCountry: boolean;\n}\n\nconst buildRowData = (result: RoundResult, showCountry: boolean, qualification?: RoundQualification) =>\n    [\n        result.rank,\n        showCountry ? result.country : null,\n        result.displayname,\n        result.score1,\n        isQualificationEnabled(qualification)\n            ? didQualify(result, qualification)\n                ? <Icon><Check /></Icon> as any\n                : <Icon><Clear /></Icon> as any\n            : null\n    ].filter(r => r != null);\n\nconst buildColumnHeadersList = (showCountry: boolean, qualification?: RoundQualification) =>\n    [\n        \"Rank\",\n        showCountry ? \"Country\" : null,\n        \"Username\",\n        \"Score\",\n        isQualificationEnabled(qualification)\n            ? { name: \"qualified\", label: \"Qualified\", options: { filter: false, sort: false, searchable: false, download: false } }\n            : null\n    ].filter(r => r != null) as any\n\nexport const ResultsTable = withStyles(mainStyles, { withTheme: true })(\n    ({ classes, qualification, results, showCountry }: ResultsTableProps) => (\n        <Paper className={classes.tableRoot}>\n            <MUIDataTable\n                title=\"Scoreboard\"\n                data={\n                    results.sort((a, b) => a.rank - b.rank)\n                        .map((result, i) =>\n                            buildRowData(result, showCountry, qualification)\n                        )\n                }\n                columns={buildColumnHeadersList(showCountry, qualification)}\n                options={{\n                    print: false,\n                    rowsPerPageOptions: [10, 25, 50, 100, 500],\n                    rowsPerPage: 50,\n                    responsive: \"scrollMaxHeight\",\n                    filter: false,\n                    selectableRows: \"none\",\n                    viewColumns: false\n                }}\n            />\n        </Paper>\n    )\n);","import { WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\nimport React from \"react\";\nimport { HorizontalBar, Bar } from \"react-chartjs-2\";\nimport { mainStyles } from \"../../styles/main\";\n\ninterface BarChartProps extends WithStyles<typeof mainStyles>, WithTheme {\n    data: Map<string | number, number>;\n    title: string;\n    label: string;\n    type: BarChartType;\n}\n\nexport enum BarChartType {\n    VERTICAL,\n    HORIZONTAL\n};\n\nconst renderHorizontal = ({ data, title, label, theme }: BarChartProps) => (\n    <HorizontalBar\n        options={{\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            },\n            title: {\n                display: true,\n                text: title\n            },\n            legend: {\n                display: false\n            }\n        }}\n        data={{\n            labels: Array.from(data.keys()),\n            datasets: [\n                {\n                    label,\n                    backgroundColor: theme.palette.primary.light,\n                    borderColor: theme.palette.primary.dark,\n                    borderWidth: 1,\n                    hoverBackgroundColor: theme.palette.secondary.light,\n                    hoverBorderColor: theme.palette.secondary.dark,\n                    data: Array.from(data.values())\n                }\n            ]\n        }}\n    />\n);\n\nconst renderVertical = ({ data, title, label, theme }: BarChartProps) => (\n    <Bar\n        options={{\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    },\n                    barPercentage: 1.0,\n                    categoryPercentage: 1.0\n                }]\n            },\n            title: {\n                display: true,\n                text: title\n            },\n            legend: {\n                display: false\n            }\n        }}\n        data={{\n            labels: Array.from(data.keys()),\n            datasets: [\n                {\n                    label: label,\n                    backgroundColor: theme.palette.primary.light,\n                    hoverBackgroundColor: theme.palette.secondary.light,\n                    data: Array.from(data.values())\n                }\n            ]\n        }}\n    />\n);\n\nexport const BarChart = withStyles(mainStyles, { withTheme: true })(\n    (props: BarChartProps) => (\n        props.type === BarChartType.HORIZONTAL\n            ? renderHorizontal(props)\n            : renderVertical(props)\n    ));","import React from \"react\";\nimport { withStyles, WithStyles, WithTheme, Grid } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { Round } from \"../model/Round\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { getMaxScore, getNumberOfParticipantsByCountry, getAverageScoreByCountry, getNumberOfParticipantsWithScoreByCountry, groupByScore, getParticipantsWithScore, getTotalSubmissions, getParticipantsWithAtLeastOneSolved } from \"../utils/stats\";\nimport { NumberStatistic } from \"./widgets/NumberStatistic\";\nimport { ResultsTable } from \"./widgets/ResultsTable\";\nimport { BarChartType, BarChart } from \"./widgets/BarChart\";\n\ninterface GlobalResultsGridProps extends WithStyles<typeof mainStyles>, WithTheme {\n    results: RoundResult[];\n    round: Round;\n    roundInfo: RoundInfo;\n}\n\nexport const GlobalResultsGrid = withStyles(mainStyles, { withTheme: true })(\n    ({ results, round, roundInfo }: GlobalResultsGridProps) => {\n        const qualification = round.qualification;\n        const maxScore = getMaxScore(roundInfo);\n        const maxEntries = 10;\n        const groupsByParticipants = getNumberOfParticipantsByCountry(results, maxEntries);\n        const groupsByAverageScore = getAverageScoreByCountry(results, maxEntries);\n        const groupsByTopScorers = getNumberOfParticipantsWithScoreByCountry(results, maxScore, maxEntries);\n        const groupsByScore = groupByScore(results, 0, maxScore);\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={roundInfo.fullScoreboardSize}\n                        label=\"participants worldwide\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithScore(results, maxScore).length}\n                        label=\"perfect scores\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getTotalSubmissions(results)}\n                        label=\"submissions in total\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithAtLeastOneSolved(results).length}\n                        label=\"people solved at least one test set\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.HORIZONTAL}\n                        data={groupsByParticipants}\n                        title={`Number of participants per country (top ${groupsByParticipants.size})`}\n                        label=\"number of participants\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.HORIZONTAL}\n                        data={groupsByAverageScore}\n                        title={`Top ${groupsByAverageScore.size} countries by average score`}\n                        label=\"average score\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.HORIZONTAL}\n                        data={groupsByTopScorers}\n                        title={`Top ${groupsByTopScorers.size} countries with the most top-scorers`}\n                        label=\"number of top-scorers\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.VERTICAL}\n                        data={groupsByScore}\n                        title=\"Score distribution\"\n                        label=\"number of participants\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ResultsTable\n                        results={results}\n                        qualification={qualification}\n                        showCountry={true}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n);","import React from \"react\";\nimport { WithStyles, WithTheme, withStyles, Grid } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { Round } from \"../model/Round\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { NumberStatistic } from \"./widgets/NumberStatistic\";\nimport { getParticipantsWithScore, getParticipantsWithAtLeastOneSolved, didQualify, getMaxScore, groupByScore } from \"../utils/stats\";\nimport { ResultsTable } from \"./widgets/ResultsTable\";\nimport { BarChartType, BarChart } from \"./widgets/BarChart\";\n\ninterface CountryResultsGridProps extends WithStyles<typeof mainStyles>, WithTheme {\n    results: RoundResult[];\n    round: Round;\n    roundInfo: RoundInfo;\n}\n\nexport const CountryResultsGrid = withStyles(mainStyles, { withTheme: true })(\n    ({ results, round, roundInfo, theme }: CountryResultsGridProps) => {\n        const maxScore = getMaxScore(roundInfo);\n        const groupsByScore = groupByScore(results, 0, maxScore);\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={results.length}\n                        label=\"participants\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithScore(results, maxScore).length}\n                        label=\"perfect scores\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithAtLeastOneSolved(results).length}\n                        label=\"people solved at least one test set\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={results.filter(r => didQualify(r, round.qualification)).length}\n                        label=\"people qualified for the next round\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <BarChart\n                        type={BarChartType.VERTICAL}\n                        data={groupsByScore}\n                        title=\"Score distribution\"\n                        label=\"number of participants\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ResultsTable\n                        results={results}\n                        qualification={round.qualification}\n                        showCountry={false}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n);","import \"typescript-array-extensions\";\n\nexport const countries = [\n    \"Afghanistan\",\n    \"Albania\",\n    \"Algeria\",\n    \"American Samoa\",\n    \"Andorra\",\n    \"Angola\",\n    \"Anguilla\",\n    \"Antarctica\",\n    \"Argentina\",\n    \"Armenia\",\n    \"Australia\",\n    \"Austria\",\n    \"Azerbaijan\",\n    \"Bahrain\",\n    \"Bangladesh\",\n    \"Belarus\",\n    \"Belgium\",\n    \"Benin\",\n    \"Bolivia\",\n    \"Bosnia and Herzegovina\",\n    \"Botswana\",\n    \"Brazil\",\n    \"British Indian Ocean Territory\",\n    \"British Virgin Islands\",\n    \"Brunei\",\n    \"Bulgaria\",\n    \"Burkina Faso\",\n    \"Cambodia\",\n    \"Cameroon\",\n    \"Canada\",\n    \"Cayman Islands\",\n    \"Chad\",\n    \"Chile\",\n    \"China\",\n    \"Colombia\",\n    \"Congo [DRC]\",\n    \"Congo [Republic]\",\n    \"Costa Rica\",\n    \"Croatia\",\n    \"Cuba\",\n    \"Cyprus\",\n    \"Czech Republic\",\n    \"Côte d'Ivoire\",\n    \"Decline to Answer\",\n    \"Denmark\",\n    \"Djibouti\",\n    \"Dominican Republic\",\n    \"Ecuador\",\n    \"Egypt\",\n    \"El Salvador\",\n    \"Estonia\",\n    \"Ethiopia\",\n    \"Fiji\",\n    \"Finland\",\n    \"France\",\n    \"Gabon\",\n    \"Georgia\",\n    \"Germany\",\n    \"Ghana\",\n    \"Greece\",\n    \"Guatemala\",\n    \"Guernsey\",\n    \"Guinea\",\n    \"Haiti\",\n    \"Hong Kong\",\n    \"Hungary\",\n    \"Iceland\",\n    \"India\",\n    \"Indonesia\",\n    \"Iran\",\n    \"Iraq\",\n    \"Ireland\",\n    \"Isle of Man\",\n    \"Israel\",\n    \"Italy\",\n    \"Jamaica\",\n    \"Japan\",\n    \"Jersey\",\n    \"Jordan\",\n    \"Kazakhstan\",\n    \"Kenya\",\n    \"Kosovo\",\n    \"Kuwait\",\n    \"Kyrgyzstan\",\n    \"Laos\",\n    \"Latvia\",\n    \"Lebanon\",\n    \"Liechtenstein\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Macau\",\n    \"Macedonia [FYROM]\",\n    \"Madagascar\",\n    \"Malawi\",\n    \"Malaysia\",\n    \"Malta\",\n    \"Martinique\",\n    \"Mauritius\",\n    \"Mexico\",\n    \"Moldova\",\n    \"Monaco\",\n    \"Mongolia\",\n    \"Montenegro\",\n    \"Morocco\",\n    \"Mozambique\",\n    \"Myanmar [Burma]\",\n    \"Namibia\",\n    \"Nepal\",\n    \"Netherlands\",\n    \"New Zealand\",\n    \"Nicaragua\",\n    \"Niger\",\n    \"Nigeria\",\n    \"North Korea\",\n    \"Norway\",\n    \"Pakistan\",\n    \"Palestine\",\n    \"Panama\",\n    \"Paraguay\",\n    \"Peru\",\n    \"Philippines\",\n    \"Poland\",\n    \"Portugal\",\n    \"Puerto Rico\",\n    \"Qatar\",\n    \"Romania\",\n    \"Russia\",\n    \"Rwanda\",\n    \"Réunion\",\n    \"Saudi Arabia\",\n    \"Senegal\",\n    \"Serbia\",\n    \"Singapore\",\n    \"Sint Maarten\",\n    \"Slovakia\",\n    \"Slovenia\",\n    \"Somalia\",\n    \"South Africa\",\n    \"South Georgia and the South Sandwich Islands\",\n    \"South Korea\",\n    \"Spain\",\n    \"Sri Lanka\",\n    \"Sudan\",\n    \"Swaziland\",\n    \"Sweden\",\n    \"Switzerland\",\n    \"Syria\",\n    \"Taiwan\",\n    \"Tajikistan\",\n    \"Thailand\",\n    \"Togo\",\n    \"Trinidad and Tobago\",\n    \"Tunisia\",\n    \"Turkey\",\n    \"Turkmenistan\",\n    \"Turks and Caicos Islands\",\n    \"U.S. Minor Outlying Islands\",\n    \"U.S. Virgin Islands\",\n    \"Uganda\",\n    \"Ukraine\",\n    \"United Arab Emirates\",\n    \"United Kingdom\",\n    \"United States\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vatican City\",\n    \"Venezuela\",\n    \"Vietnam\",\n    \"Yemen\",\n    \"Zimbabwe\",\n    \"Åland Islands\",\n    \"Afghanistan\",\n    \"Albania\",\n    \"Algeria\",\n    \"American Samoa\",\n    \"Andorra\",\n    \"Angola\",\n    \"Antarctica\",\n    \"Argentina\",\n    \"Armenia\",\n    \"Australia\",\n    \"Austria\",\n    \"Azerbaijan\",\n    \"Bahrain\",\n    \"Bangladesh\",\n    \"Belarus\",\n    \"Belgium\",\n    \"Benin\",\n    \"Bhutan\",\n    \"Bolivia\",\n    \"Bosnia and Herzegovina\",\n    \"Botswana\",\n    \"Brazil\",\n    \"British Virgin Islands\",\n    \"Bulgaria\",\n    \"Burkina Faso\",\n    \"Burundi\",\n    \"Cambodia\",\n    \"Cameroon\",\n    \"Canada\",\n    \"Cayman Islands\",\n    \"Chile\",\n    \"China\",\n    \"Colombia\",\n    \"Congo [DRC]\",\n    \"Costa Rica\",\n    \"Croatia\",\n    \"Cuba\",\n    \"Cyprus\",\n    \"Czech Republic\",\n    \"Côte d'Ivoire\",\n    \"Decline to Answer\",\n    \"Denmark\",\n    \"Dominica\",\n    \"Dominican Republic\",\n    \"Ecuador\",\n    \"Egypt\",\n    \"El Salvador\",\n    \"Estonia\",\n    \"Ethiopia\",\n    \"Fiji\",\n    \"Finland\",\n    \"France\",\n    \"Georgia\",\n    \"Germany\",\n    \"Ghana\",\n    \"Greece\",\n    \"Greenland\",\n    \"Guadeloupe\",\n    \"Guatemala\",\n    \"Guernsey\",\n    \"Guinea\",\n    \"Haiti\",\n    \"Honduras\",\n    \"Hong Kong\",\n    \"Hungary\",\n    \"Iceland\",\n    \"India\",\n    \"Indonesia\",\n    \"Iran\",\n    \"Iraq\",\n    \"Ireland\",\n    \"Israel\",\n    \"Italy\",\n    \"Jamaica\",\n    \"Japan\",\n    \"Jersey\",\n    \"Jordan\",\n    \"Kazakhstan\",\n    \"Kenya\",\n    \"Kosovo\",\n    \"Kuwait\",\n    \"Kyrgyzstan\",\n    \"Laos\",\n    \"Latvia\",\n    \"Lebanon\",\n    \"Lesotho\",\n    \"Liechtenstein\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Macau\",\n    \"Macedonia [FYROM]\",\n    \"Madagascar\",\n    \"Malaysia\",\n    \"Malta\",\n    \"Martinique\",\n    \"Mauritius\",\n    \"Mexico\",\n    \"Moldova\",\n    \"Monaco\",\n    \"Mongolia\",\n    \"Morocco\",\n    \"Mozambique\",\n    \"Myanmar [Burma]\",\n    \"Nepal\",\n    \"Netherlands\",\n    \"New Zealand\",\n    \"Nicaragua\",\n    \"Nigeria\",\n    \"North Korea\",\n    \"Norway\",\n    \"Oman\",\n    \"Pakistan\",\n    \"Palestine\",\n    \"Panama\",\n    \"Paraguay\",\n    \"Peru\",\n    \"Philippines\",\n    \"Poland\",\n    \"Portugal\",\n    \"Puerto Rico\",\n    \"Romania\",\n    \"Russia\",\n    \"Rwanda\",\n    \"Réunion\",\n    \"Saudi Arabia\",\n    \"Senegal\",\n    \"Serbia\",\n    \"Singapore\",\n    \"Slovakia\",\n    \"Slovenia\",\n    \"Somalia\",\n    \"South Africa\",\n    \"South Georgia and the South Sandwich Islands\",\n    \"South Korea\",\n    \"Spain\",\n    \"Sri Lanka\",\n    \"Sudan\",\n    \"Sweden\",\n    \"Switzerland\",\n    \"Syria\",\n    \"Taiwan\",\n    \"Tajikistan\",\n    \"Tanzania\",\n    \"Thailand\",\n    \"Togo\",\n    \"Tokelau\",\n    \"Trinidad and Tobago\",\n    \"Tunisia\",\n    \"Turkey\",\n    \"Turkmenistan\",\n    \"Tuvalu\",\n    \"U.S. Virgin Islands\",\n    \"Uganda\",\n    \"Ukraine\",\n    \"United Arab Emirates\",\n    \"United Kingdom\",\n    \"United States\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vatican City\",\n    \"Venezuela\",\n    \"Vietnam\",\n    \"Western Sahara\",\n    \"Yemen\",\n    \"Zimbabwe\",\n    \"Åland Islands\"\n]\n    .distinct()\n    .sort();\n","import React from \"react\";\nimport { withStyles, WithTheme, WithStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { countries } from \"../utils/countries\";\nimport Select from \"react-select\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles,\n    countrySelect: {\n        fontFamily: theme.typography.fontFamily\n    }\n})\n\ninterface CountrySelectProps extends WithStyles<typeof styles>, WithTheme {\n    selectedCountry?: string;\n    onSelectionChanged: (country?: string) => void;\n}\n\nconst getValue = (country?: string) =>\n    country ? country : \"Worldwide\";\n\nexport const CountrySelect = withStyles(styles, { withTheme: true })(\n    ({ selectedCountry, onSelectionChanged, classes }: CountrySelectProps) => (\n        <Select\n            className={classes.countrySelect}\n            defaultValue={{ value: getValue(selectedCountry), label: getValue(selectedCountry) }}\n            isSearchable\n            options={[\"Worldwide\"].concat(countries).map(c => ({ value: c, label: c }))}\n            onChange={(e: any) => onSelectionChanged(e.label === \"Worldwide\" ? undefined : e.label)}\n        />\n    )\n);","import React from \"react\";\nimport { withStyles, WithStyles, createStyles, Theme, Tooltip } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { Task, RoundInfo } from \"../model/RoundInfo\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles,\n    capsule: {\n        backgroundColor: \"#B7B9C7\",\n        height: 10,\n        display: \"flex\",\n        flexDirection: \"row\",\n        borderRadius: 8,\n        overflow: \"hidden\"\n    },\n    capsulePart: {\n        height: \"100%\"\n    }\n});\n\n\ninterface Props extends WithStyles<typeof styles> {\n    task: Task;\n    roundInfo: RoundInfo;\n}\n\n// const gray = \"#dedede\";\n// const red = \"#c5221f\";\n// const blues = [\n//     \"#3F51B5\",\n//     \"#6475D9\",\n//     \"#768AFC\",\n//     \"#8FA0FC\"\n// ];\n\nconst red = \"#f50057\";\nconst blues = [\n    \"#3F51B5\",\n    \"#7380C9\",\n    \"#A7AFDD\",\n    \"#DCDFF1\"\n];\n\ninterface Stat {\n    participantCount: number;\n    participantPercentage: number;\n    solvedTestSetCount: number;\n    points: number;\n}\n\nconst getStatText = (stat: Stat): string => {\n    // N participants (p%) failed Test Set 1\n    // N participants (p%) solved 1 test set for P pts\n    // N participants (p%) solved K test sets for P total pts\n    const N = stat.participantCount;\n    const p = (stat.participantPercentage * 100).toFixed(0);\n    const P = stat.points;\n    const K = stat.solvedTestSetCount;\n    if (K === 0) {\n        return `${N} participants (${p}%) failed Test Set 1`;\n    }\n    if (K === 1) {\n        return `${N} participants (${p}%) solved 1 test set for ${P} pts`;\n    }\n    return `${N} participants (${p}%) solved ${K} test sets for ${P} total pts`;\n}\n\nconst calculateSolvedParts = (task: Task, roundInfo: RoundInfo): Stat[] => {\n    const tests = task.tests.filter(t => t.value > 0).reverse();\n    let totalValue = tests.map(t => t.value).reduce((a, s) => a + s);\n    let testSetCount = tests.length;\n    let countedParticipants = 0;\n    return tests.map(test => {\n        const participantCount = (test.numSolved || 0) - countedParticipants;\n        const res = {\n            participantCount,\n            participantPercentage: (participantCount) / roundInfo.fullScoreboardSize,\n            solvedTestSetCount: testSetCount,\n            points: totalValue\n        };\n        testSetCount--;\n        totalValue -= test.value;\n        countedParticipants += participantCount;\n        return res;\n    }).concat([{\n        participantCount: task.numAttempted - countedParticipants,\n        participantPercentage: (task.numAttempted - countedParticipants) / roundInfo.fullScoreboardSize,\n        solvedTestSetCount: 0,\n        points: 0\n    }]);\n}\n\nexport const TaskStatsCapsule = withStyles(styles, { withTheme: true })((props: Props) =>\n    <div className={props.classes.capsule}>\n        {\n            calculateSolvedParts(props.task, props.roundInfo).map((stat, i) =>\n                <Tooltip placement=\"bottom\" title={getStatText(stat)} key={i}>\n                    <div\n                        className={props.classes.capsulePart}\n                        style={{\n                            width: `${Math.max(5, stat.participantPercentage * 100)}%`,\n                            backgroundColor: stat.solvedTestSetCount > 0 ? blues[i] : red\n                        }}\n                    />\n                </Tooltip>\n            ).reverse()\n        }\n    </div>\n);","import React from \"react\";\nimport { withStyles, Card, CardContent, Typography, WithStyles, Link, Theme, createStyles, Tooltip } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { Task, RoundInfo } from \"../model/RoundInfo\";\nimport { TaskStatsCapsule } from \"./TaskStatsCapsule\";\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles,\n    taskTitle: {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\"\n    },\n    titleContainer: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n    },\n    pointsContainer: {\n        marginBottom: 10\n    }\n});\n\ninterface TaskCardProps extends WithStyles<typeof styles> {\n    task: Task;\n    roundInfo: RoundInfo;\n}\n\nconst renderPoints = (task: Task): string =>\n    task.tests.filter(t => t.value > 0).map(t => `${t.value} pts`).join(\", \");\n\nexport const TaskCard = withStyles(styles, { withTheme: true })((props: TaskCardProps) =>\n    <Card>\n        <CardContent>\n            <div className={props.classes.titleContainer}>\n                <Tooltip title={props.task.title} placement=\"top\">\n                    <Typography variant=\"h6\" className={props.classes.taskTitle}>\n                        {props.task.title}\n                    </Typography>\n                </Tooltip>\n                <Link target=\"_blank\" href={`https://codingcompetitions.withgoogle.com/codejam/round/${props.roundInfo.challenge.id}/${props.task.id}`}>\n                    <LaunchIcon fontSize=\"small\" />\n                </Link>\n            </div>\n            <div className={props.classes.pointsContainer}>\n                <Typography variant=\"caption\">{renderPoints(props.task)}</Typography>\n            </div>\n            <TaskStatsCapsule task={props.task} roundInfo={props.roundInfo} />\n        </CardContent>\n    </Card >\n);","import { Task } from \"../model/RoundInfo\";\n\nexport const totalValue = (task: Task): number =>\n    task.tests.map(t => t.value).reduce((v, s) => v + s);\n\nexport const sortByTotalValue = (tasks: Task[]): Task[] =>\n    tasks.sort((a, b) => totalValue(a) - totalValue(b));","import React from \"react\";\nimport { withStyles, WithStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { Task, RoundInfo } from \"../model/RoundInfo\";\nimport { TaskCard } from \"./TaskCard\";\nimport { sortByTotalValue } from \"../utils/task\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles,\n    taskContainer: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\n        gridGap: \"15px\"\n    }\n});\n\ninterface TaskGridProps extends WithStyles<typeof styles> {\n    tasks: Task[];\n    roundInfo: RoundInfo;\n}\n\nexport const TaskGrid = withStyles(styles, { withTheme: true })((props: TaskGridProps) =>\n    <div className={props.classes.taskContainer}>\n        {sortByTotalValue(props.tasks).map(task =>\n            <div key={task.id}>\n                <TaskCard task={task} roundInfo={props.roundInfo} />\n            </div>\n        )}\n    </div>\n);","import { CircularProgress, Grid, Typography, WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { Round } from \"../model/Round\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { mainStyles } from \"../styles/main\";\nimport { fetchRoundInfo, fetchRoundResults } from \"../utils/api\";\nimport { GlobalResultsGrid } from \"./GlobalResultsGrid\";\nimport { CountryResultsGrid } from \"./CountryResultsGrid\";\nimport { CountrySelect } from \"./CountrySelect\";\nimport { TaskGrid } from \"./TaskGrid\";\n\ninterface RoundContainerProps extends WithStyles<typeof mainStyles>, WithTheme {\n    round?: Round;\n}\n\ninterface RoundContainerState {\n    isLoading: boolean;\n    roundInfo?: RoundInfo;\n    roundResults: RoundResult[];\n    selectedCountry?: string;\n}\n\nexport const RoundContainer = withStyles(mainStyles, { withTheme: true })(\n    class extends Component<RoundContainerProps, RoundContainerState> {\n        state: RoundContainerState = {\n            isLoading: false,\n            roundInfo: undefined,\n            roundResults: [],\n            selectedCountry: undefined\n        }\n\n        async componentWillReceiveProps(nextProps: RoundContainerProps) {\n            if (this.props === nextProps) return;\n            if (!nextProps.round) {\n                this.setState({ isLoading: false, roundInfo: undefined, roundResults: [] });\n                return;\n            }\n            this.setState({ isLoading: true });\n            const roundId = nextProps.round.id;\n            const info = await fetchRoundInfo(roundId);\n            const results = await fetchRoundResults(roundId);\n            console.log(info, results);\n            this.setState({ isLoading: false, roundInfo: info, roundResults: results });\n        }\n\n        renderHelp() {\n            return (\n                <Typography paragraph>\n                    Please select a round from the side menu.\n                </Typography>\n            )\n        }\n\n        renderStats(roundInfo: RoundInfo, results: RoundResult[]) {\n            if (!this.props.round || !this.state.roundInfo) {\n                return null;\n            }\n            const country = this.state.selectedCountry;\n            if (country !== undefined) {\n                results = results.filter(r => r.country.toUpperCase() === country.toUpperCase());\n            }\n            return (\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h3\" gutterBottom>\n                            Problems\n                        </Typography>\n                        <TaskGrid\n                            tasks={this.state.roundInfo?.challenge.tasks || []}\n                            roundInfo={this.state.roundInfo}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h3\" gutterBottom>\n                            Country stats\n                        </Typography>\n                        <CountrySelect\n                            selectedCountry={this.state.selectedCountry}\n                            onSelectionChanged={country => this.setState({ selectedCountry: country })}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        {!this.state.selectedCountry\n                            ? <GlobalResultsGrid round={this.props.round} roundInfo={roundInfo} results={results} />\n                            : <CountryResultsGrid round={this.props.round} roundInfo={roundInfo} results={results} />\n                        }\n                    </Grid>\n                </Grid>\n            )\n        }\n\n        render() {\n            return (\n                <main className={this.props.classes.content}>\n                    <div className={this.props.classes.toolbar} />\n                    {this.state.isLoading\n                        ? <CircularProgress className={this.props.classes.progress} color=\"secondary\" />\n                        : !this.state.roundInfo\n                            ? this.renderHelp()\n                            : this.renderStats(this.state.roundInfo, this.state.roundResults)\n                    }\n                </main>\n            )\n        }\n    }\n);","import React from \"react\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\n\nexport const Github = (props: any) => (\n    <SvgIcon {...props}>\n        <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\n    </SvgIcon>\n);","import { AppBar, IconButton, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { mainStyles } from \"../styles/main\";\nimport { Github } from \"./icons/Github\";\n\ninterface HeaderProps extends WithStyles<typeof mainStyles> {\n    onDrawerToggle: () => void;\n}\n\nconst formatLastUpdateDate = () => {\n    const d = new Date(document.lastModified);\n    return \"v\" +\n        d.getUTCFullYear().toString().padStart(4, \"0\") +\n        (d.getUTCMonth() + 1).toString().padStart(2, \"0\") +\n        d.getUTCDate().toString().padStart(2, \"0\") +\n        \".\" +\n        d.getUTCHours().toString().padStart(2, \"0\") +\n        d.getUTCMinutes().toString().padStart(2, \"0\");\n}\n\nexport const Header = withStyles(mainStyles)(({ classes, onDrawerToggle }: HeaderProps) => (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n            <IconButton\n                color=\"inherit\"\n                aria-label=\"Open drawer\"\n                onClick={onDrawerToggle}\n                className={classes.menuButton}\n            >\n                <Menu />\n            </IconButton>\n            <div style={{ flexGrow: 1 }}>\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                    Google Code Jam Stats\n                </Typography>\n                <Typography variant=\"caption\" color=\"inherit\" noWrap>\n                    {formatLastUpdateDate()}\n                </Typography>\n            </div>\n            <IconButton\n                component=\"a\"\n                title=\"GitHub\"\n                color=\"inherit\"\n                href=\"https://github.com/vstrimaitis/google_codejam_stats\"\n                target=\"_blank\"\n            >\n                <Github />\n            </IconButton>\n        </Toolbar>\n    </AppBar >\n));","import { CircularProgress, Drawer, Hidden, List, ListItem, ListItemText, WithStyles, withStyles, WithTheme, Badge, Typography, Tooltip } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { Round } from \"../model/Round\";\nimport { mainStyles } from \"../styles/main\";\nimport { Header } from \"./Header\";\n\ninterface SidebarProps extends WithStyles<typeof mainStyles>, WithTheme {\n    isLoading: boolean;\n    rounds: Round[];\n    onRoundClicked: (round: Round) => void;\n}\n\ninterface SidebarState {\n    isDrawerOpen: boolean;\n}\n\nexport const Sidebar = withStyles(mainStyles, { withTheme: true })(class extends Component<SidebarProps, SidebarState> {\n    state: SidebarState = {\n        isDrawerOpen: false\n    }\n\n    renderOfficialRoundLink = (toggleDrawer: boolean, round: Round) => (\n        <ListItem key={round.id} button>\n            <ListItemText\n                disableTypography={true}\n                onClick={() => {\n                    if (toggleDrawer) this.handleDrawerToggle();\n                    this.props.onRoundClicked(round);\n                }}\n            >\n                <Typography>\n                    {`${round.displayName} ${round.year}`}\n                </Typography>\n            </ListItemText>\n        </ListItem>\n    );\n\n    renderUnofficialRoundLink = (toggleDrawer: boolean, round: Round) => (\n        <Tooltip title=\"Results are not official yet\" placement=\"right\" key={round.id}>\n            <ListItem key={round.id} button>\n                <ListItemText\n                    disableTypography={true}\n                    onClick={() => {\n                        if (toggleDrawer) this.handleDrawerToggle();\n                        this.props.onRoundClicked(round);\n                    }}\n                >\n                    <Badge variant=\"dot\" color=\"secondary\">\n                        <Typography>\n                            {`${round.displayName} ${round.year}`}\n                        </Typography>\n                    </Badge>\n                </ListItemText>\n            </ListItem>\n        </Tooltip>\n    );\n\n    renderDrawer(toggleDrawer: boolean) {\n        const { classes, isLoading, rounds } = this.props;\n        return (\n            isLoading\n                ? <CircularProgress className={classes.progress} />\n                :\n                <List>\n                    {rounds.map(round =>\n                        round.areResultsOfficial\n                            ? this.renderOfficialRoundLink(toggleDrawer, round)\n                            : this.renderUnofficialRoundLink(toggleDrawer,\n                                round)\n                    )}\n                </List>\n        );\n    }\n\n    handleDrawerToggle = () => {\n        this.setState({ isDrawerOpen: !this.state.isDrawerOpen });\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Header onDrawerToggle={this.handleDrawerToggle} />\n                <nav className={classes.drawer}>\n                    <Hidden smUp implementation=\"css\">\n                        <Drawer\n                            className={classes.drawer}\n                            variant=\"temporary\"\n                            anchor={this.props.theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                            open={this.state.isDrawerOpen}\n                            onClose={this.handleDrawerToggle}\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                        >\n                            {this.renderDrawer(true)}\n                        </Drawer>\n                    </Hidden>\n                    <Hidden xsDown implementation=\"css\">\n                        <Drawer\n                            className={classes.drawer}\n                            variant=\"permanent\"\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            open\n                        >\n                            <div className={classes.toolbar} />\n                            {this.renderDrawer(false)}\n                        </Drawer>\n                    </Hidden>\n                </nav>\n            </div>\n        );\n    }\n});","import { withStyles, WithStyles } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { RoundContainer } from \"../components/RoundContainer\";\nimport { Sidebar } from \"../components/Sidebar\";\nimport { Round } from \"../model/Round\";\nimport { fetchConfig } from \"../utils/api\";\nimport { mainStyles } from \"../styles/main\";\n\ninterface MainViewState {\n    rounds: Round[];\n    isLoading: boolean;\n    selectedRound?: Round;\n}\n\ninterface MainViewProps extends WithStyles<typeof mainStyles> { }\n\nexport const MainView = withStyles(mainStyles)(class extends Component<MainViewProps, MainViewState> {\n    state: MainViewState = {\n        rounds: [],\n        isLoading: true\n    };\n\n    async componentDidMount() {\n        const config = await fetchConfig();\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        this.setState({\n            rounds: config.rounds,\n            isLoading: false\n        });\n    }\n\n    render() {\n        const { isLoading, rounds, selectedRound } = this.state;\n        const classes = this.props.classes;\n        return (\n            <div className={classes.root}>\n                <Sidebar\n                    {...this.props}\n                    isLoading={isLoading}\n                    rounds={rounds}\n                    onRoundClicked={round => this.setState({ selectedRound: round })}\n                />\n                <RoundContainer\n                    {...this.props}\n                    round={selectedRound}\n                />\n            </div>\n        );\n    }\n});\n","import React, { Component } from \"react\";\nimport { MainView } from \"./views/MainView\";\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport { pink, indigo } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: indigo,\n        secondary: pink,\n        type: \"light\"\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <React.Fragment>\n                    <CssBaseline />\n                    <MainView />\n                </React.Fragment>\n            </MuiThemeProvider>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"chart.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}