{"version":3,"sources":["model/Round.ts","styles/main.ts","utils/api.ts","utils/stats.ts","components/widgets/GroupedBarChart.tsx","components/widgets/NumberStatistic.tsx","components/RoundContainer.tsx","components/Header.tsx","components/Sidebar.tsx","views/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QualificationType","mainStyles","theme","createStyles","root","display","appBar","zIndex","drawer","Object","defineProperty","breakpoints","up","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","unit","flexDirection","overflowX","toolbar","mixins","progress","margin","alignSelf","menuButton","marginRight","tableRoot","handleErrors","r","status","Error","statusText","data","fetchRoundInfo","roundId","axios","get","concat","then","fetchRoundResults","getParticipantsWithScore","results","score","filter","score1","getTotalSubmissions","map","result","taskInfo","task","totalAttempts","sum","getParticipantsWithAtLeastOneSolved","length","getStatsByCountry","convert","compare","maxEntries","Map","Array","from","groupBy","index","arr","country","entries","kvp","sort","a","b","slice","GroupedBarChart","withStyles","withTheme","_ref","title","label","react_default","createElement","es","options","scales","xAxes","ticks","beginAtZero","text","legend","labels","keys","datasets","backgroundColor","palette","primary","light","borderColor","dark","borderWidth","hoverBackgroundColor","secondary","hoverBorderColor","values","NumberStatistic","objectSpread","card","textAlign","number","classes","index_es","className","variant","color","RoundContainer","_Component","_temp","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","isLoading","roundInfo","undefined","roundResults","inherits","createClass","key","value","_componentWillReceiveProps","asyncToGenerator","regenerator_default","mark","_callee","nextProps","info","wrap","_context","prev","next","props","abrupt","round","setState","id","sent","console","log","stop","_x","paragraph","qualification","maxScore","challenge","tasks","tests","test","getMaxScore","groupsByParticipants","getNumberOfParticipantsByCountry","groupsByAverageScore","average","getAverageScoreByCountry","groupsByTopScorers","getNumberOfParticipantsWithScoreByCountry","groupsByScore","minScore","groups","scores","i","push","groupByScore","container","item","xs","sm","md","fullScoreboardSize","size","barPercentage","categoryPercentage","type","NONE","x","rank","displayname","RANK","threshold","icons_index_es","SCORE","renderStats","renderHelp","Component","Header","onDrawerToggle","position","aria-label","onClick","noWrap","Sidebar","isDrawerOpen","handleDrawerToggle","toggleDrawer","_this2","_this$props","rounds","onRoundClicked","button","displayName","year","smUp","implementation","anchor","direction","open","onClose","paper","renderDrawer","xsDown","MainView","_componentDidMount","config","Promise","resolve","setTimeout","_this$state","selectedRound","assign","createMuiTheme","indigo","pink","typography","useNextVariants","App","core_styles","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0ef9906.chunk.js","sourcesContent":["export enum QualificationType {\r\n    NONE = \"NONE\",\r\n    SCORE = \"SCORE\",\r\n    RANK = \"RANK\"\r\n}\r\n\r\ntype DisabledRoundQualification = {\r\n    type: QualificationType.NONE\r\n};\r\n\r\ntype EnabledRoundQualification = {\r\n    type: QualificationType.SCORE | QualificationType.RANK,\r\n    threshold: number\r\n};\r\n\r\ntype RoundQualification = DisabledRoundQualification | EnabledRoundQualification;\r\n\r\nexport interface Round {\r\n    id: string;\r\n    year: number;\r\n    displayName: string;\r\n    qualification: RoundQualification;\r\n}\r\n\r\n// const f = (q:RoundQualification) => {\r\n//     if(q.type == QualificationType.SCORE) {\r\n//         const x = q.value;\r\n//     } else if(q.type == QualificationType.RANK) {\r\n        \r\n//     } else {\r\n//         q.\r\n//     }\r\n// }\r\n\r\n// export const isQualificationEnabled = (q: RoundQualification): q is DisabledRoundQualification =>\r\n//     q.type === QualificationType.NONE;\r\n","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\nconst drawerWidth = 240;\r\nexport const mainStyles = (theme: Theme) => createStyles({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        }\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing.unit * 3,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        overflowX: \"auto\"\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    progress: {\r\n        margin: theme.spacing.unit*2,\r\n        alignSelf: \"center\"\r\n    },\r\n    menuButton: {\r\n        marginRight: 20,\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n        },\r\n    },\r\n    tableRoot: {\r\n        overflowX: \"auto\"\r\n    }\r\n});","import axios, { AxiosResponse } from \"axios\";\r\nimport { Config } from \"../model/Config\";\r\nimport { RoundInfo } from \"../model/RoundInfo\";\r\nimport { RoundResult } from \"../model/RoundResult\";\r\n\r\nconst handleErrors = <T>(r: AxiosResponse<T>) => {\r\n    if (r.status < 200 || r.status >= 300) throw new Error(r.status + \": \" + r.statusText);\r\n    return r.data;\r\n};\r\n\r\nexport const fetchConfig = () =>\r\n    axios\r\n        .get<Config>(\"config.json\")\r\n        .then(handleErrors)\r\n\r\nexport const fetchRoundInfo = (roundId: string) =>\r\n    axios\r\n        .get<RoundInfo>(`round_data/info/${roundId}.json`)\r\n        .then(handleErrors);\r\n\r\nexport const fetchRoundResults = (roundId: string) =>\r\n    axios\r\n        .get<RoundResult[]>(`round_data/scores/${roundId}.json`)\r\n        .then(handleErrors);","import \"typescript-array-extensions\";\r\nimport { RoundInfo } from \"../model/RoundInfo\";\r\nimport { RoundResult } from \"../model/RoundResult\";\r\n\r\nexport const getMaxScore = (roundInfo: RoundInfo) =>\r\n    roundInfo\r\n        .challenge\r\n        .tasks\r\n        .map(task =>\r\n            task.tests\r\n                .map(test=>test.value)\r\n                .sum()\r\n        )\r\n        .sum();\r\n\r\nexport const getParticipantsWithScore = (results: RoundResult[], score: number) =>\r\n    results.filter(r => r.score1 === score);\r\n\r\nexport const getTotalSubmissions = (results: RoundResult[]) =>\r\n    results.map(result =>\r\n        result\r\n            .taskInfo\r\n            .map(task => task.totalAttempts)\r\n            .sum()\r\n    )\r\n    .sum();\r\n\r\nexport const getParticipantsWithAtLeastOneSolved = (results: RoundResult[]) =>\r\n    results.filter(result =>\r\n        result\r\n            .taskInfo\r\n            .filter(task => task.score > 0)\r\n            .length > 0\r\n    );\r\n\r\nexport const getNumberOfParticipantsByCountry = (results: RoundResult[], maxEntries?: number) =>\r\n    getStatsByCountry(\r\n        results,\r\n        r => r.length,\r\n        (a, b) => -a+b,\r\n        maxEntries\r\n    );\r\n\r\nexport const getAverageScoreByCountry = (results: RoundResult[], maxEntries?: number) =>\r\n    getStatsByCountry(\r\n        results,\r\n        r => r.map(result => result.score1).average(),\r\n        (a, b) => -a+b,\r\n        maxEntries\r\n    );\r\n\r\nexport const getNumberOfParticipantsWithScoreByCountry = (results: RoundResult[], score: number, maxEntries?: number) => \r\n    getStatsByCountry(\r\n        results,\r\n        r => r.filter(result => result.score1 === score).length,\r\n        (a, b) => -a+b,\r\n        maxEntries\r\n    );\r\n\r\nexport const groupByScore = (results: RoundResult[], minScore: number, maxScore: number) => {\r\n    const groups = new Map(Array.from(\r\n            results.groupBy((result, index, arr) => result.score1)\r\n        )\r\n        .map(kvp => [kvp[0], kvp[1].length] as [number, number])\r\n        .sort((a, b) => a[0]-b[0])\r\n    );\r\n    const scores = [];\r\n    for(let i = minScore; i <= maxScore; i++) scores.push(i);\r\n    return new Map(scores.map(score => [score, groups.get(score) || 0]));\r\n}\r\n\r\nexport const getStatsByCountry = <T>(\r\n        results: RoundResult[],\r\n        convert: (result: RoundResult[]) => T,\r\n        compare: (a: T, b: T) => number,\r\n        maxEntries?: number) =>\r\n            new Map(Array.from(\r\n                results\r\n                    .groupBy((result, index, arr) => result.country)\r\n                    .entries()\r\n            )\r\n            .map(kvp => [kvp[0], convert(kvp[1])] as [string, T])\r\n            .sort((a, b) => compare(a[1], b[1]))\r\n            .slice(0, maxEntries)\r\n)\r\n","import { WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { HorizontalBar } from \"react-chartjs-2\";\r\nimport { mainStyles } from \"../../styles/main\";\r\n\r\ninterface GroupedBarChartProps extends WithStyles<typeof mainStyles>, WithTheme {\r\n    data: Map<string, number>;\r\n    title: string;\r\n    label: string;\r\n}\r\n\r\nexport const GroupedBarChart = withStyles(mainStyles, {withTheme: true})(({data, title, label, theme}: GroupedBarChartProps) => (\r\n    <HorizontalBar\r\n        options={{\r\n            scales: {\r\n                xAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }\r\n                }]\r\n            },\r\n            title: { \r\n                display: true,\r\n                text: title\r\n            },\r\n            legend: {\r\n                display: false\r\n            }\r\n        }}\r\n        data={{\r\n            labels: Array.from(data.keys()),\r\n            datasets:[\r\n                {\r\n                    label,\r\n                    backgroundColor: theme.palette.primary.light,\r\n                    borderColor: theme.palette.primary.dark,\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: theme.palette.secondary.light,\r\n                    hoverBorderColor: theme.palette.secondary.dark,\r\n                    data: Array.from(data.values())\r\n                }\r\n            ]\r\n        }}\r\n    />\r\n));","import React from \"react\";\r\nimport { withStyles, WithStyles, Theme, createStyles, Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport { mainStyles } from \"../../styles/main\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    ...mainStyles,\r\n    card: {\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\ninterface NumberStatisticProps extends WithStyles<typeof styles> {\r\n    number: number;\r\n    label: string;\r\n}\r\n\r\nexport const NumberStatistic = withStyles(styles)(\r\n    ({number, label, classes}: NumberStatisticProps) => (\r\n        <Card>\r\n            <CardContent className={classes.card}>\r\n                <Typography variant=\"h2\">\r\n                    {number}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                    {label}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n);","import { CircularProgress, Grid, Icon, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography, WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\r\nimport { Check, Clear } from \"@material-ui/icons\";\r\nimport React, { Component } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { QualificationType, Round } from \"../model/Round\";\r\nimport { RoundInfo } from \"../model/RoundInfo\";\r\nimport { RoundResult } from \"../model/RoundResult\";\r\nimport { mainStyles } from \"../styles/main\";\r\nimport { fetchRoundInfo, fetchRoundResults } from \"../utils/api\";\r\nimport { getAverageScoreByCountry, getMaxScore, getNumberOfParticipantsByCountry, getNumberOfParticipantsWithScoreByCountry, getParticipantsWithAtLeastOneSolved, getParticipantsWithScore, getTotalSubmissions, groupByScore } from \"../utils/stats\";\r\nimport { GroupedBarChart } from \"./widgets/GroupedBarChart\";\r\nimport { NumberStatistic } from \"./widgets/NumberStatistic\";\r\n\r\ninterface RoundContainerProps extends WithStyles<typeof mainStyles>, WithTheme {\r\n    round?: Round;\r\n}\r\n\r\ninterface RoundContainerState {\r\n    isLoading: boolean;\r\n    roundInfo?: RoundInfo;\r\n    roundResults: RoundResult[]\r\n}\r\n\r\nexport const RoundContainer = withStyles(mainStyles, {withTheme: true})(\r\n    class extends Component<RoundContainerProps, RoundContainerState> {\r\n        state: RoundContainerState = {\r\n            isLoading: false,\r\n            roundInfo: undefined,\r\n            roundResults: []\r\n        }\r\n\r\n        async componentWillReceiveProps(nextProps: RoundContainerProps) {\r\n            if(this.props == nextProps) return;\r\n            if(!nextProps.round) {\r\n                this.setState({isLoading: false, roundInfo: undefined, roundResults: []});\r\n                return;\r\n            }\r\n            this.setState({isLoading: true});\r\n            const roundId = nextProps.round.id;\r\n            const info = await fetchRoundInfo(roundId);\r\n            const results = await fetchRoundResults(roundId);\r\n            console.log(info, results);\r\n            this.setState({isLoading: false, roundInfo: info, roundResults: results});\r\n        }\r\n\r\n        renderHelp() {\r\n            return (\r\n                <Typography paragraph>\r\n                    Please select a round from the side menu.\r\n                </Typography>\r\n            )\r\n        }\r\n\r\n        renderStats(roundInfo: RoundInfo, results: RoundResult[]) {\r\n            const qualification = this.props.round ? this.props.round.qualification : undefined;\r\n            const maxScore = getMaxScore(roundInfo);\r\n            const maxEntries = 10;\r\n            const groupsByParticipants = getNumberOfParticipantsByCountry(results, maxEntries);\r\n            const groupsByAverageScore = getAverageScoreByCountry(results, maxEntries);\r\n            const groupsByTopScorers = getNumberOfParticipantsWithScoreByCountry(results, maxScore, maxEntries);\r\n            const groupsByScore = groupByScore(results, 0, maxScore);\r\n            console.log(groupsByScore);\r\n            console.log(qualification);\r\n            return (\r\n                <Grid container spacing={16}>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <NumberStatistic\r\n                            number={roundInfo.fullScoreboardSize}\r\n                            label=\"participants worldwide\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <NumberStatistic\r\n                            number={getParticipantsWithScore(results, maxScore).length}\r\n                            label=\"perfect scores\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <NumberStatistic\r\n                            number={getTotalSubmissions(results)}\r\n                            label=\"submissions in total\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <NumberStatistic\r\n                            number={getParticipantsWithAtLeastOneSolved(results).length}\r\n                            label=\"people solved at least one test set\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <GroupedBarChart\r\n                            data={groupsByParticipants}\r\n                            title={`Number of participants per country (top ${groupsByParticipants.size})`}\r\n                            label=\"number of participants\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <GroupedBarChart\r\n                            data={groupsByAverageScore}\r\n                            title={`Top ${groupsByAverageScore.size} countries by average score`}\r\n                            label=\"average score\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <GroupedBarChart\r\n                            data={groupsByTopScorers}\r\n                            title={`Top ${groupsByTopScorers.size} countries with the most top-scorers`}\r\n                            label=\"number of top-scorers\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Bar\r\n                            options={{\r\n                                scales: {\r\n                                    xAxes: [{\r\n                                        ticks: {\r\n                                            beginAtZero: true\r\n                                        },\r\n                                        barPercentage: 1.0,\r\n                                        categoryPercentage: 1.0\r\n                                    }]\r\n                                },\r\n                                title: { \r\n                                    display: true,\r\n                                    text: \"Score distribution\"\r\n                                },\r\n                                legend: {\r\n                                    display: false\r\n                                }\r\n                            }}\r\n                            data={{\r\n                                labels: Array.from(groupsByScore.keys()),\r\n                                datasets:[\r\n                                    {\r\n                                        label: \"number of participants\",\r\n                                        backgroundColor: this.props.theme.palette.primary.light,\r\n                                        hoverBackgroundColor: this.props.theme.palette.secondary.light,\r\n                                        data: Array.from(groupsByScore.values())\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={this.props.classes.tableRoot}>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Rank</TableCell>\r\n                                        <TableCell>Username</TableCell>\r\n                                        <TableCell>Score</TableCell>\r\n                                        { qualification && qualification.type !== QualificationType.NONE\r\n                                        ? <TableCell>Qualified</TableCell>\r\n                                        : null\r\n                                        }\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {results\r\n                                        .filter(x => x.country == \"Lithuania\")\r\n                                        .sort((a, b) => a.rank-b.rank)\r\n                                        .map((result, i) =>\r\n                                            <TableRow key={i}>\r\n                                                <TableCell>{result.rank}</TableCell>\r\n                                                <TableCell>{result.displayname}</TableCell>\r\n                                                <TableCell>{result.score1}</TableCell>\r\n                                                { qualification\r\n                                                ? qualification.type === QualificationType.RANK\r\n                                                ? <TableCell><Icon>{result.rank <= qualification.threshold ? <Check /> : <Clear/>}</Icon></TableCell>\r\n                                                : qualification.type === QualificationType.SCORE\r\n                                                ? <TableCell><Icon>{result.score1 >= qualification.threshold ? <Check/> : <Clear/>}</Icon></TableCell>\r\n                                                : null\r\n                                                : null\r\n                                                }\r\n                                            </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <main className={this.props.classes.content}>\r\n                    <div className={this.props.classes.toolbar} />\r\n                    { this.state.isLoading\r\n                    ? <CircularProgress className={this.props.classes.progress} color=\"secondary\" />\r\n                    : !this.state.roundInfo\r\n                    ? this.renderHelp()\r\n                    : this.renderStats(this.state.roundInfo, this.state.roundResults)\r\n                    }\r\n                </main>\r\n            )\r\n        }\r\n    }\r\n);","import { AppBar, IconButton, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { mainStyles } from \"../styles/main\";\r\n\r\ninterface HeaderProps extends WithStyles<typeof mainStyles> {\r\n    onDrawerToggle: () => void;\r\n}\r\n\r\nexport const Header = withStyles(mainStyles)(({classes, onDrawerToggle}: HeaderProps) => (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"Open drawer\"\r\n                onClick={onDrawerToggle}\r\n                className={classes.menuButton}\r\n            >\r\n                <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                Google Code Jam Statistics\r\n            </Typography>\r\n        </Toolbar>\r\n    </AppBar>\r\n));","import { CircularProgress, Drawer, Hidden, List, ListItem, ListItemText, WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { Round } from \"../model/Round\";\r\nimport { mainStyles } from \"../styles/main\";\r\nimport { Header } from \"./Header\";\r\n\r\ninterface SidebarProps extends WithStyles<typeof mainStyles>, WithTheme {\r\n    isLoading: boolean;\r\n    rounds: Round[];\r\n    onRoundClicked: (round: Round) => void;\r\n}\r\n\r\ninterface SidebarState {\r\n    isDrawerOpen: boolean;\r\n}\r\n\r\nexport const Sidebar = withStyles(mainStyles, {withTheme: true})(class extends Component<SidebarProps, SidebarState> {\r\n    state: SidebarState = {\r\n        isDrawerOpen: false\r\n    }\r\n\r\n    renderDrawer(toggleDrawer: boolean) {\r\n        const {classes, isLoading, rounds, onRoundClicked} = this.props;\r\n        return (\r\n            isLoading\r\n            ? <CircularProgress className={classes.progress} />\r\n            :\r\n            <List>\r\n                {rounds.map(round =>\r\n                    <ListItem key={round.id} button>\r\n                        <ListItemText\r\n                            primary={`${round.displayName} ${round.year}`}\r\n                            onClick={() => {\r\n                                if(toggleDrawer) this.handleDrawerToggle();\r\n                                onRoundClicked(round);\r\n                            }}\r\n                        />\r\n                    </ListItem>\r\n                )}\r\n            </List>\r\n        );\r\n    }\r\n\r\n    handleDrawerToggle = () => {\r\n        this.setState({isDrawerOpen: !this.state.isDrawerOpen});\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                <Header onDrawerToggle={this.handleDrawerToggle} />\r\n                <nav className={classes.drawer}>\r\n                    <Hidden smUp implementation=\"css\">\r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"temporary\"\r\n                            anchor={this.props.theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n                            open={this.state.isDrawerOpen}\r\n                            onClose={this.handleDrawerToggle}\r\n                            classes={{\r\n                                paper: classes.drawerPaper\r\n                            }}\r\n                        >\r\n                            {this.renderDrawer(true)}\r\n                        </Drawer>\r\n                    </Hidden>\r\n                    <Hidden xsDown implementation=\"css\"> \r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"permanent\"\r\n                            classes={{\r\n                                paper: classes.drawerPaper\r\n                            }}\r\n                            open\r\n                        >\r\n                            <div className={classes.toolbar}/>\r\n                            {this.renderDrawer(false)}\r\n                        </Drawer>\r\n                    </Hidden>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n});","import { withStyles, WithStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { RoundContainer } from \"../components/RoundContainer\";\r\nimport { Sidebar } from \"../components/Sidebar\";\r\nimport { Round } from \"../model/Round\";\r\nimport { fetchConfig } from \"../utils/api\";\r\nimport { mainStyles } from \"../styles/main\";\r\n\r\ninterface MainViewState {\r\n    rounds: Round[];\r\n    isLoading: boolean;\r\n    selectedRound?: Round;\r\n}\r\n\r\ninterface MainViewProps extends WithStyles<typeof mainStyles> {}\r\n\r\nexport const MainView = withStyles(mainStyles)(class extends Component<MainViewProps, MainViewState> {\r\n    state: MainViewState = {\r\n        rounds: [],\r\n        isLoading: true\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const config = await fetchConfig();\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        this.setState({\r\n            rounds: config.rounds,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, rounds, selectedRound} = this.state;\r\n        const classes = this.props.classes;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Sidebar\r\n                    {...this.props}\r\n                    isLoading={isLoading}\r\n                    rounds={rounds}\r\n                    onRoundClicked={round => this.setState({selectedRound: round})}\r\n                />\r\n                <RoundContainer\r\n                    {...this.props}\r\n                    round={selectedRound}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\n// export const MainView = withStyles(styles)(MainView);","import React, { Component } from \"react\";\r\nimport { Round } from \"./model/Round\";\r\nimport { fetchConfig } from \"./utils/api\";\r\nimport { Switch, Route } from \"react-router\";\r\nimport { MainView } from \"./views/MainView\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { RoundView } from \"./views/RoundView\";\r\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { pink, indigo } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: indigo,\r\n        secondary: pink,\r\n        type: \"light\"\r\n    },\r\n    typography: {\r\n        useNextVariants: true\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                <React.Fragment>\r\n                    <CssBaseline />\r\n                    <MainView />\r\n                </React.Fragment>\r\n            </MuiThemeProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"chart.js\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}